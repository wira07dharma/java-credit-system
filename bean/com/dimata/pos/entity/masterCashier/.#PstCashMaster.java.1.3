/* Generated by Together */

package com.dimata.pos.entity.masterCashier;

import com.dimata.pos.db.*;
/* package java */
/* package qdep */
import java.sql.ResultSet;
import java.util.Vector;

//import com.dimata.qdep.db.*;
/* package cashier */
import com.dimata.qdep.entity.Entity;
import com.dimata.qdep.entity.I_PersintentExc;
import com.dimata.util.lang.I_Language;

public class PstCashMaster extends DBHandler implements I_DBInterface, I_DBType, I_PersintentExc, I_Language {
    
    //public static final String TBL_CASH_MASTER = "CASH_MASTER";
    public static final String TBL_CASH_MASTER = "cash_master";
    
    public static final int FLD_CASH_MASTER_ID = 0;    
    public static final int FLD_LOCATION_ID    = 1;
    public static final int FLD_CASHIER_NUMBER = 2;    
    public static final int FLD_TAX            = 3;
    public static final int FLD_SERVICE        = 4;
    public static final int FLD_PRICE_TYPE     = 5;    
    
    public static final String[] fieldNames = {
        "CASH_MASTER_ID",
        "LOCATION_ID",
        "CASHIER_NUMBER",
        "TAX",
        "SERVICE",
        "PRICE_TYPE"
    };
    
    public static final  int[] fieldTypes = {
        TYPE_LONG + TYPE_PK + TYPE_ID,
        TYPE_LONG + TYPE_FK,
        TYPE_INT,
        TYPE_FLOAT,
        TYPE_FLOAT,
        TYPE_STRING
    };
    
    //constructor
    public PstCashMaster(){
    }
    
    public PstCashMaster(int i)throws DBException {
        super(new PstCashMaster());
    }
    
    public PstCashMaster(String sOid) throws DBException {
        super(new PstCashMaster(0));
        if(!locate(sOid))
            throw new DBException(this,DBException.RECORD_NOT_FOUND);
        else
            return;
    }
    
    public PstCashMaster(long lOid) throws DBException {
        super(new PstCashMaster(0));
        String sOid="0";
        try {
            sOid = String.valueOf(lOid);
        }catch(Exception e) {
            throw new DBException(this,DBException.RECORD_NOT_FOUND);
        }
        if(!locate(sOid))
            throw new DBException(this,DBException.RECORD_NOT_FOUND);
        else
            return;
    }
    
    public int getFieldSize(){
        return fieldNames.length;
    }
    
    public String getTableName(){
        return TBL_CASH_MASTER;
    }
    
    public String[] getFieldNames(){
        return fieldNames;
    }
    
    public int[] getFieldTypes(){
        return fieldTypes;
    }
    
    public String getPersistentName(){
        return new PstCashMaster().getClass().getName();
    }
    
    public long fetchExc(Entity ent) throws Exception{
        CashMaster cashMaster = fetchExc(ent.getOID());
        ent = (Entity)cashMaster;
        return cashMaster.getOID();
    }
    
    public long insertExc(Entity ent) throws Exception{
        return insertExc((CashMaster) ent);
    }
    
    public long updateExc(Entity ent) throws Exception{
        return updateExc((CashMaster) ent);
    }
    
    public long deleteExc(Entity ent) throws Exception{
        if(ent==null){
            throw new DBException(this,DBException.RECORD_NOT_FOUND);
        }
        return deleteExc(ent.getOID());
        
    }
    
    public static CashMaster fetchExc(long oid) throws DBException{
        try{
            CashMaster cashMaster = new CashMaster();
            PstCashMaster pstCashMaster = new PstCashMaster(oid);
            cashMaster.setOID(oid);            
            cashMaster.setLocationId(pstCashMaster.getlong(FLD_LOCATION_ID));
            cashMaster.setCashierNumber(pstCashMaster.getInt(FLD_CASHIER_NUMBER));
            cashMaster.setCashTax(pstCashMaster.getdouble(FLD_TAX));
            cashMaster.setCashService(pstCashMaster.getdouble(FLD_SERVICE));
            cashMaster.setPriceType(pstCashMaster.getString(FLD_PRICE_TYPE));
            return cashMaster;
        }catch(DBException dbe){
            System.out.println("error ="+dbe);
            throw dbe;
        }catch(Exception e){
            System.out.println("error ="+e);
            throw new DBException(new PstCashMaster(0),DBException.UNKNOWN);
        }
    }
    
    public static long insertExc(CashMaster cashMaster) throws DBException{
        try{
            PstCashMaster pstCashMaster = new PstCashMaster(0);            
            pstCashMaster.setLong(FLD_LOCATION_ID,cashMaster.getLocationId());
            pstCashMaster.setInt(FLD_CASHIER_NUMBER,cashMaster.getCashierNumber());
            pstCashMaster.setDouble(FLD_TAX,cashMaster.getCashTax());
            pstCashMaster.setDouble(FLD_SERVICE,cashMaster.getCashService());            
            pstCashMaster.setString(FLD_PRICE_TYPE,cashMaster.getPriceType());                        
            pstCashMaster.insert();
            cashMaster.setOID(pstCashMaster.getlong(FLD_CASH_MASTER_ID));
        }catch(DBException dbe){
            throw dbe;
        }catch(Exception e){
            throw new DBException(new PstCashMaster(0),DBException.UNKNOWN);
        }
        return cashMaster.getOID();
    }
    
    public static long updateExc(CashMaster cashMaster) throws DBException{
        try{
            if(cashMaster.getOID() != 0){
                PstCashMaster pstCashMaster = new PstCashMaster(cashMaster.getOID());
                pstCashMaster.setLong(FLD_LOCATION_ID,cashMaster.getLocationId());
                pstCashMaster.setInt(FLD_CASHIER_NUMBER,cashMaster.getCashierNumber());
                pstCashMaster.setDouble(FLD_TAX,cashMaster.getCashTax());
                pstCashMaster.setDouble(FLD_SERVICE,cashMaster.getCashService());            
                pstCashMaster.setString(FLD_PRICE_TYPE,cashMaster.getPriceType());                                        
                pstCashMaster.update();
                return cashMaster.getOID();
            }
        }catch(DBException dbe){
            throw dbe;
        }catch(Exception e){
            throw new DBException(new PstCashMaster(0),DBException.UNKNOWN);
        }
        return 0;
    }
    
    public static long deleteExc(long oid) throws DBException{
        try{
            PstCashMaster pstCashMaster = new PstCashMaster(oid);
            pstCashMaster.delete();
        }catch(DBException dbe){
            throw dbe;
        }catch(Exception e){
            throw new DBException(new PstCashMaster(0),DBException.UNKNOWN);
        }
        return oid;
    }
    
    public static Vector listAll(){
        return list(0, 500, "","");
    }
    
    public static int getCount(String whereClause){
            DBResultSet dbrs = null;
            try {
                    String sql = "SELECT COUNT("+ PstCashMaster.fieldNames[PstCashMaster.FLD_CASH_MASTER_ID] + ") FROM " + TBL_CASH_MASTER;
                    if(whereClause != null && whereClause.length() > 0)
                            sql = sql + " WHERE " + whereClause;

                    dbrs = DBHandler.execQueryResult(sql);
                    ResultSet rs = dbrs.getResultSet();

                    int count = 0;
                    while(rs.next()) { count = rs.getInt(1); }

                    rs.close();
                    return count;
            }catch(Exception e) {
                    return 0;
            }finally {
                    DBResultSet.close(dbrs);
            }
    }
    
    public static Vector list(int limitStart,int recordToGet, String whereClause, String order){
        Vector lists = new Vector();
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT * FROM " + TBL_CASH_MASTER;
            if(whereClause != null && whereClause.length() > 0)
                sql = sql + " WHERE " + whereClause;
            if(order != null && order.length() > 0)
                sql = sql + " ORDER BY " + order;
            
            switch (DBHandler.DBSVR_TYPE) {
                case DBHandler.DBSVR_MYSQL :
                    if(limitStart == 0 && recordToGet == 0)
                        sql = sql + "";
                    else
                        sql = sql + " LIMIT " + limitStart + ","+ recordToGet ;
                    break;
                case DBHandler.DBSVR_POSTGRESQL :
                    if(limitStart == 0 && recordToGet == 0)
                        sql = sql + "";
                    else
                        sql = sql + " LIMIT " +recordToGet + " OFFSET "+ limitStart ;
                    break;
                case DBHandler.DBSVR_SYBASE :
                    break;
                case DBHandler.DBSVR_ORACLE :
                    break;
                case DBHandler.DBSVR_MSSQL :
                    break;
                    
                default:
                    if(limitStart == 0 && recordToGet == 0)
                        sql = sql + "";
                    else
                        sql = sql + " LIMIT " + limitStart + ","+ recordToGet ;
            }
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while(rs.next()) {
                CashMaster cashMaster = new CashMaster();
                resultToObject(rs, cashMaster);
                lists.add(cashMaster);
            }
            rs.close();
            return lists;
            
        }catch(Exception e) {
            System.out.println(e);
        }finally {
            DBResultSet.close(dbrs);
        }
        return new Vector();
    }
    
    public static void resultToObject(ResultSet rs, CashMaster cashMaster){
        try{
            cashMaster.setOID(rs.getLong(PstCashMaster.fieldNames[PstCashMaster.FLD_CASH_MASTER_ID]));            
            cashMaster.setLocationId(rs.getLong(PstCashMaster.fieldNames[PstCashMaster.FLD_LOCATION_ID]));
            cashMaster.setCashierNumber(rs.getInt(PstCashMaster.fieldNames[PstCashMaster.FLD_CASHIER_NUMBER]));
            cashMaster.setCashTax(rs.getDouble(PstCashMaster.fieldNames[PstCashMaster.FLD_TAX]));
            cashMaster.setCashService(rs.getDouble(PstCashMaster.fieldNames[PstCashMaster.FLD_SERVICE]));
            cashMaster.setPriceType(rs.getString(PstCashMaster.fieldNames[PstCashMaster.FLD_PRICE_TYPE]));
        }catch(Exception e){ }
    }
    
    
}
