/* Generated by Together */

package com.dimata.pos.entity.balance;

import com.dimata.pos.db.*;
import com.dimata.pos.entity.masterCashier.*;
import com.dimata.common.entity.location.*;
import com.dimata.pos.entity.billing.*;
import com.dimata.posbo.entity.masterdata.*;
/* package qdep */
import java.sql.ResultSet;
import java.util.Vector;
import java.util.Date;

//import com.dimata.qdep.db.*;
/* package cashier */
import com.dimata.qdep.entity.Entity;
import com.dimata.qdep.entity.I_PersintentExc;
import com.dimata.util.lang.I_Language;

public class PstCashCashier extends DBHandler implements I_DBInterface, I_DBType, I_PersintentExc, I_Language {

   //public static final String TBL_CASH_CASHIER="CASH_CASHIER";
   public static final String TBL_CASH_CASHIER="cash_cashier";

   public static final int FLD_CASH_CASHIER_ID=0;
   public static final int FLD_CASHMASTER_ID=1;
   public static final int FLD_APPUSER_ID=2;
   public static final int FLD_OPEN_DATE=3;
   public static final int FLD_SPV_OID=4;
   public static final int FLD_SPV_NAME=5;
   public static final int FLD_SPVCLOSE_OID=6;
   public static final int FLD_SPVCLOSE_NAME=7;
   //+shift
   public static final int FLD_SHIFT_ID=8;

   public static final String[] fieldNames = {
    "CASH_CASHIER_ID",
    "CASH_MASTER_ID",
    "APP_USER_ID",
    "OPEN_DATE",
    "SPV_OPEN_ID",
    "SPV_OPEN_NAME",
    "SPV_CLOSE_ID",
    "SPV_CLOSE_NAME",
    //+shift
    "SHIFT_ID"
  };

   public static final  int[] fieldTypes = {
    TYPE_LONG + TYPE_PK + TYPE_ID,
    TYPE_LONG + TYPE_FK,
    TYPE_LONG + TYPE_FK,
    TYPE_DATE,
    TYPE_LONG + TYPE_FK,
    TYPE_STRING,
    TYPE_LONG + TYPE_FK,
    TYPE_STRING,
    //+shift
    TYPE_LONG
    };

  //constructor
    public PstCashCashier(){
    }

    public PstCashCashier(int i)throws DBException {
        super(new PstCashCashier());
    }

    public PstCashCashier(String sOid) throws DBException {
        super(new PstCashCashier(0));
        if(!locate(sOid))
            throw new DBException(this,DBException.RECORD_NOT_FOUND);
        else
            return;
    }

     public PstCashCashier(long lOid) throws DBException {
        super(new PstCashCashier(0));
        String sOid="0";
        try {
            sOid = String.valueOf(lOid);
        }catch(Exception e) {
            throw new DBException(this,DBException.RECORD_NOT_FOUND);
        }
        if(!locate(sOid))
            throw new DBException(this,DBException.RECORD_NOT_FOUND); 
		else 
	return; 
    }

    public int getFieldSize(){
	   return fieldNames.length;
	 }

    public String getTableName(){
	   return TBL_CASH_CASHIER;
	}

	public String[] getFieldNames(){ 
		return fieldNames; 
	}

	public int[] getFieldTypes(){ 
		return fieldTypes; 
	}

	public String getPersistentName(){ 
		return new PstCashCashier().getClass().getName();
	}

    public long fetchExc(Entity ent) throws Exception{
        CashCashier cashCashier = fetchExc(ent.getOID());
        ent = (Entity)cashCashier;
        return cashCashier.getOID();
    }

    public long insertExc(Entity ent) throws Exception{
        return insertExc((CashCashier) ent);
    }

    public long updateExc(Entity ent) throws Exception{
        return updateExc((CashCashier) ent);
    }

    public long deleteExc(Entity ent) throws Exception{
        if(ent==null){
            throw new DBException(this,DBException.RECORD_NOT_FOUND);
        }
        return deleteExc(ent.getOID());
    }

    public static CashCashier fetchExc(long oid) throws DBException{
        try{
            CashCashier cashCashier = new CashCashier();
            PstCashCashier pstCashCashier = new PstCashCashier(oid);
            cashCashier.setOID(oid);
            cashCashier.setCashMasterId(pstCashCashier.getlong(FLD_CASHMASTER_ID));
            cashCashier.setAppUserId(pstCashCashier.getlong(FLD_APPUSER_ID));
            cashCashier.setCashDate(pstCashCashier.getDate(FLD_OPEN_DATE));
            cashCashier.setSpvOid(pstCashCashier.getlong(FLD_SPV_OID));
            cashCashier.setSpvName(pstCashCashier.getString(FLD_SPV_NAME));
            cashCashier.setSpvCloseOid(pstCashCashier.getlong(FLD_SPVCLOSE_OID));
            cashCashier.setSpvCloseName(pstCashCashier.getString(FLD_SPVCLOSE_NAME));
            //+shift
            cashCashier.setShiftId(pstCashCashier.getLong(FLD_SHIFT_ID));


            return cashCashier;
       	}catch(DBException dbe){
            System.out.println(">>>>>>>>"+dbe);
			throw dbe; 
		}catch(Exception e){
            System.out.println(">>>>>>>>>>>"+e);
			throw new DBException(new PstCashCashier(0),DBException.UNKNOWN);
		} 
	}

     public static long insertExc(CashCashier cashCashier) throws DBException{
        try{
            PstCashCashier pstCashCashier = new PstCashCashier(0);

            pstCashCashier.setLong(FLD_CASHMASTER_ID,cashCashier.getCashMasterId());
            pstCashCashier.setDate(FLD_OPEN_DATE,cashCashier.getCashDate());
            pstCashCashier.setLong(FLD_APPUSER_ID,cashCashier.getAppUserId());
            pstCashCashier.setLong(FLD_SPV_OID,cashCashier.getSpvOid());
            pstCashCashier.setString(FLD_SPV_NAME,cashCashier.getSpvName());
            pstCashCashier.setLong(FLD_SPVCLOSE_OID,cashCashier.getSpvCloseOid());
            pstCashCashier.setString(FLD_SPVCLOSE_NAME,cashCashier.getSpvCloseName());
            //+shift
            pstCashCashier.setLong(FLD_SHIFT_ID, cashCashier.getShiftId());


            pstCashCashier.insert();
            cashCashier.setOID(pstCashCashier.getlong(FLD_CASH_CASHIER_ID));
        }catch(DBException dbe){
            throw dbe;
        }catch(Exception e){
            throw new DBException(new PstCashCashier(0),DBException.UNKNOWN);
        }
        return cashCashier.getOID();
    }

      public static long insertExcByOid(CashCashier cashCashier) throws DBException{
        try{
            PstCashCashier pstCashCashier = new PstCashCashier(0);

            pstCashCashier.setLong(FLD_CASHMASTER_ID,cashCashier.getCashMasterId());
            pstCashCashier.setDate(FLD_OPEN_DATE,cashCashier.getCashDate());
            pstCashCashier.setLong(FLD_APPUSER_ID,cashCashier.getAppUserId());
            pstCashCashier.setLong(FLD_SPV_OID,cashCashier.getSpvOid());
            pstCashCashier.setString(FLD_SPV_NAME,cashCashier.getSpvName());
            pstCashCashier.setLong(FLD_SPVCLOSE_OID,cashCashier.getSpvCloseOid());
            pstCashCashier.setString(FLD_SPVCLOSE_NAME,cashCashier.getSpvCloseName());
            
            pstCashCashier.insertByOid(cashCashier.getOID());
            //cashCashier.setOID(pstCashCashier.getlong(FLD_CASH_CASHIER_ID));
        }catch(DBException dbe){
            throw dbe;
        }catch(Exception e){
            throw new DBException(new PstCashCashier(0),DBException.UNKNOWN);
        }
        return cashCashier.getOID();
    }




       public static long updateExc(CashCashier cashCashier) throws DBException{
     try{
        if(cashCashier.getOID() != 0){
           
	    PstCashCashier pstCashCashier = new PstCashCashier(cashCashier.getOID());
          
            pstCashCashier.setLong(FLD_CASHMASTER_ID,cashCashier.getCashMasterId());
            pstCashCashier.setLong(FLD_APPUSER_ID,cashCashier.getAppUserId());
            pstCashCashier.setDate(FLD_OPEN_DATE,cashCashier.getCashDate());
            pstCashCashier.setLong(FLD_SPV_OID,cashCashier.getSpvOid());
            pstCashCashier.setString(FLD_SPV_NAME,cashCashier.getSpvName());
            pstCashCashier.setLong(FLD_SPVCLOSE_OID,cashCashier.getSpvCloseOid());
            pstCashCashier.setString(FLD_SPVCLOSE_NAME,cashCashier.getSpvCloseName());
            //+shift
            pstCashCashier.setLong(FLD_SHIFT_ID, cashCashier.getShiftId());

            pstCashCashier.update();
            return cashCashier.getOID();
          }
        }catch(DBException dbe){
			throw dbe; 
		}catch(Exception e){ 
			throw new DBException(new PstCashCashier(0),DBException.UNKNOWN);
		}
		return 0;
    }

      public static long deleteExc(long oid) throws DBException{
        try{
              PstCashCashier pstCashCashier = new PstCashCashier(oid);
              pstCashCashier.delete();
        }catch(DBException dbe){
			throw dbe; 
		}catch(Exception e){ 
			throw new DBException(new PstCashCashier(0),DBException.UNKNOWN);
		}
		return oid;
	}

    public static Vector listAll(){
		return list(0, 500, "",""); 
	}

	public static Vector list(int limitStart,int recordToGet, String whereClause, String order){
		Vector lists = new Vector(); 
		DBResultSet dbrs = null;
		try {
			String sql = "SELECT * FROM " + TBL_CASH_CASHIER;
			if(whereClause != null && whereClause.length() > 0)
				sql = sql + " WHERE " + whereClause;
			if(order != null && order.length() > 0)
				sql = sql + " ORDER BY " + order;

			switch (DBHandler.DBSVR_TYPE) { 
			case DBHandler.DBSVR_MYSQL : 
					if(limitStart == 0 && recordToGet == 0)
						sql = sql + ""; 
					else 
						sql = sql + " LIMIT " + limitStart + ","+ recordToGet ; 
				 break;
			case DBHandler.DBSVR_POSTGRESQL : 
 					if(limitStart == 0 && recordToGet == 0) 
						sql = sql + ""; 
					else 
						sql = sql + " LIMIT " +recordToGet + " OFFSET "+ limitStart ;
				 break;
			case DBHandler.DBSVR_SYBASE :
				 break;
			case DBHandler.DBSVR_ORACLE :
				 break;
			case DBHandler.DBSVR_MSSQL :
				 break;

			default:
                if(limitStart == 0 && recordToGet == 0)
					sql = sql + ""; 
				else 
					sql = sql + " LIMIT " + limitStart + ","+ recordToGet ; 
			}
            dbrs = DBHandler.execQueryResult(sql);
			ResultSet rs = dbrs.getResultSet();
			while(rs.next()) {
				CashCashier cashCashier = new CashCashier();
				resultToObject(rs, cashCashier);
				lists.add(cashCashier);
			}
			rs.close();
			return lists;

		}catch(Exception e) {
			System.out.println(e);
		}finally {
			DBResultSet.close(dbrs);
		}
			return new Vector();
  	}
        //List Cash Per Opening
        public static Vector listCashOpening(int limitStart,int recordToGet, String whereClause, String order){
		Vector lists = new Vector();
		DBResultSet dbrs = null;
		try {
                    String sql = "SELECT CSH." + fieldNames[FLD_CASH_CASHIER_ID] +
                         " , MSTR." + PstCashMaster.fieldNames[PstCashMaster.FLD_CASH_MASTER_ID] +
                         " , SHF." + PstShift.fieldNames[PstShift.FLD_SHIFT_ID] +
                         " , LOC." + PstLocation.fieldNames[PstLocation.FLD_LOCATION_ID] +
                         " , LOC." + PstLocation.fieldNames[PstLocation.FLD_NAME] +
                         " , CSH." + fieldNames[FLD_OPEN_DATE] +
                         " , SHF." + PstShift.fieldNames[PstShift.FLD_NAME] +
                         " , MSTR." + PstCashMaster.fieldNames[PstCashMaster.FLD_CASHIER_NUMBER] +
                         //+cash_bill_main
                        // " , CBM." + PstBillMain.fieldNames[PstBillMain.FLD_DOC_TYPE]+
                        // " , CBM." + PstBillMain.fieldNames[PstBillMain.FLD_TRANSCATION_TYPE]+
                         //" , CBM." + PstBillMain.fieldNames[PstBillMain.FLD_TRANSACTION_STATUS]+
                         " FROM " + TBL_CASH_CASHIER + " CSH" +
                         " INNER JOIN " + PstCashMaster.TBL_CASH_MASTER + " MSTR" +
                         " ON CSH." + fieldNames[FLD_CASHMASTER_ID] +
                         " = MSTR." + PstCashMaster.fieldNames[PstCashMaster.FLD_CASH_MASTER_ID] +
                         " INNER JOIN " + PstLocation.TBL_P2_LOCATION + " LOC" +
                         " ON MSTR." + PstCashMaster.fieldNames[PstCashMaster.FLD_LOCATION_ID] +
                         " = LOC." + PstLocation.fieldNames[PstLocation.FLD_LOCATION_ID] +
                         " INNER JOIN " + PstShift.TBL_SHIFT + " SHF" +
                         " ON CSH." + fieldNames[FLD_SHIFT_ID] +
                         " = SHF." + PstShift.fieldNames[PstShift.FLD_SHIFT_ID];
                         //+inner join cash_bill_main
                        // " INNER JOIN " + PstBillMain.TBL_CASH_BILL_MAIN + " CBM" +
                        // " ON CBM." + PstBillMain.fieldNames[PstBillMain.FLD_CASH_CASHIER_ID] +
                        // " = CSH." + fieldNames[FLD_CASH_CASHIER_ID];

			if(whereClause != null && whereClause.length() > 0)
				sql = sql + " WHERE " + whereClause;
			if(order != null && order.length() > 0)
				sql = sql + " ORDER BY " + order;

			switch (DBHandler.DBSVR_TYPE) {
			case DBHandler.DBSVR_MYSQL :
			if(limitStart == 0 && recordToGet == 0)
				sql = sql + "";
			else
				sql = sql + " LIMIT " + limitStart + ","+ recordToGet ;
				 break;
			case DBHandler.DBSVR_POSTGRESQL :
 			if(limitStart == 0 && recordToGet == 0)
				sql = sql + "";
			else
				sql = sql + " LIMIT " +recordToGet + " OFFSET "+ limitStart ;
				 break;
			case DBHandler.DBSVR_SYBASE :
				 break;
			case DBHandler.DBSVR_ORACLE :
				 break;
			case DBHandler.DBSVR_MSSQL :
				 break;

			default:
                if(limitStart == 0 && recordToGet == 0)
                    sql = sql + "";
		else
                    sql = sql + " LIMIT " + limitStart + ","+ recordToGet ;
			}
                dbrs = DBHandler.execQueryResult(sql);
		ResultSet rs = dbrs.getResultSet();

		while(rs.next()) {
                Vector temp = new Vector();
                CashCashier cashCashier = new CashCashier();
                CashMaster cashMaster = new CashMaster();
                Location location = new Location();
                Shift shift = new Shift();
               // BillMain billMain = new BillMain();

                cashCashier.setOID(rs.getLong(1));
                //cashCashier.setCashDate(rs.getDate(6));
                cashCashier.setCashDate(rs.getTimestamp(6));
               // cashCashier.setCashDate(rs.getObject(6);

                temp.add(cashCashier);

                cashMaster.setOID(rs.getLong(2));
                cashMaster.setCashierNumber(rs.getInt(8));
                temp.add(cashMaster);

                location.setOID(rs.getLong(4));
                location.setName(rs.getString(5));
                temp.add(location);

                shift.setOID(rs.getLong(3));
                shift.setName(rs.getString(7));
                temp.add(shift);

               // billMain.setDocType(rs.getInt(9));
               // billMain.setTransctionType(rs.getInt(10));
               // billMain.setTransactionStatus(rs.getInt(11));

                lists.add(temp);
            }
            rs.close();
            return lists;

        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return new Vector();
    }

    //+count Per Cash Opening
    public static int getCountPerCashOpening(String whereClause) {
        int count = 0;
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT CSH." + fieldNames[FLD_CASH_CASHIER_ID] +
                         " , MSTR." + PstCashMaster.fieldNames[PstCashMaster.FLD_CASH_MASTER_ID] +
                         " , SHF." + PstShift.fieldNames[PstShift.FLD_SHIFT_ID] +
                         " , LOC." + PstLocation.fieldNames[PstLocation.FLD_LOCATION_ID] +
                         " , LOC." + PstLocation.fieldNames[PstLocation.FLD_NAME] +
                         " , CSH." + fieldNames[FLD_OPEN_DATE] +
                         " , SHF." + PstShift.fieldNames[PstShift.FLD_NAME] +
                         " , MSTR." + PstCashMaster.fieldNames[PstCashMaster.FLD_CASHIER_NUMBER] +
                         //+cash_bill_main
                        // " , CBM." + PstBillMain.fieldNames[PstBillMain.FLD_DOC_TYPE]+
                        // " , CBM." + PstBillMain.fieldNames[PstBillMain.FLD_TRANSCATION_TYPE]+
                        // " , CBM." + PstBillMain.fieldNames[PstBillMain.FLD_TRANSACTION_STATUS]+
                         " FROM " + TBL_CASH_CASHIER + " CSH" +
                         " INNER JOIN " + PstCashMaster.TBL_CASH_MASTER + " MSTR" +
                         " ON CSH." + fieldNames[FLD_CASHMASTER_ID] +
                         " INNER JOIN " + PstLocation.TBL_P2_LOCATION + " LOC" +
                         " ON MSTR." + PstCashMaster.fieldNames[PstCashMaster.FLD_LOCATION_ID] +
                         " = LOC." + PstLocation.fieldNames[PstLocation.FLD_LOCATION_ID] +
                         " INNER JOIN " + PstShift.TBL_SHIFT + " SHF" +
                         " ON CSH." + fieldNames[FLD_SHIFT_ID] +
                         " = SHF." + PstShift.fieldNames[PstShift.FLD_SHIFT_ID];
                         //+inner join cash_bill_main
                         // " INNER JOIN " + PstBillMain.TBL_CASH_BILL_MAIN + " CBM" +
                         //" ON CBM." + PstBillMain.fieldNames[PstBillMain.FLD_CASH_CASHIER_ID] +
                        // " = CSH." + fieldNames[FLD_CASH_CASHIER_ID];

            if (whereClause != null && whereClause.length() > 0)
                sql = sql + " WHERE " + whereClause;

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                count = rs.getInt(1);
            }
            rs.close();
        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return count;
    }


    public static void resultToObject(ResultSet rs, CashCashier cashCashier){
	try{
	    cashCashier.setOID(rs.getLong(PstCashCashier.fieldNames[PstCashCashier.FLD_CASH_CASHIER_ID]));
            cashCashier.setCashMasterId(rs.getLong(PstCashCashier.fieldNames[PstCashCashier.FLD_CASHMASTER_ID]));
            Date date = DBHandler.convertDate(rs.getDate(PstCashCashier.fieldNames[PstCashCashier.FLD_OPEN_DATE]),rs.getTime(PstCashCashier.fieldNames[PstCashCashier.FLD_OPEN_DATE]));
            cashCashier.setCashDate(date);
            //cashCashier.setCashDate(rs.getDate(PstCashCashier.fieldNames[PstCashCashier.FLD_OPEN_DATE]));
            cashCashier.setAppUserId(rs.getLong(PstCashCashier.fieldNames[PstCashCashier.FLD_APPUSER_ID]));
            cashCashier.setSpvOid(rs.getLong(PstCashCashier.fieldNames[PstCashCashier.FLD_SPV_OID]));
            cashCashier.setSpvName(rs.getString(PstCashCashier.fieldNames[PstCashCashier.FLD_SPV_NAME]));
            cashCashier.setSpvCloseOid(rs.getLong(PstCashCashier.fieldNames[PstCashCashier.FLD_SPVCLOSE_OID]));
            cashCashier.setSpvCloseName(rs.getString(PstCashCashier.fieldNames[PstCashCashier.FLD_SPVCLOSE_NAME]));
            cashCashier.setShiftId(rs.getLong(PstCashCashier.fieldNames[PstCashCashier.FLD_SHIFT_ID]));

	}catch(Exception e){ }
	}

public static boolean checkOID(long cashCashierId)
        {
            DBResultSet dbrs = null;
            boolean result = false;
            try
            {
		String sql = "SELECT * FROM " + TBL_CASH_CASHIER + 
                    " WHERE " + PstCashCashier.fieldNames[PstCashCashier.FLD_CASH_CASHIER_ID] + 
                    " = " + cashCashierId;

		dbrs = DBHandler.execQueryResult(sql);
		ResultSet rs = dbrs.getResultSet();

		while(rs.next()) 
                { 
                    result = true; 
                }
		rs.close();
            }
            catch(Exception e)
            {
		System.out.println("err : "+e.toString());
            }
            finally
            {
		DBResultSet.close(dbrs);
            }
            return result;
	}        
}
