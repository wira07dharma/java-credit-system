/* Generated by Together */

package com.dimata.pos.entity.billing;

import com.dimata.pos.db.*;
/* package java */
import java.util.Vector;

/* package qdep */
import java.sql.ResultSet;
import java.util.Date;
//import com.dimata.qdep.db.*;
/* package cashier */
import com.dimata.pos.entity.balance.PstCashCashier;
import com.dimata.pos.entity.masterCashier.PstCashMaster;
import com.dimata.qdep.entity.Entity;
import com.dimata.qdep.entity.I_PersintentExc;
import com.dimata.util.Formater;
import com.dimata.util.lang.I_Language;
import org.json.JSONObject;

public class PstBillMain extends DBHandler implements I_DBInterface, I_DBType, I_PersintentExc, I_Language {
    //public static final String TBL_CASH_BILL_MAIN = "CASH_BILL_MAIN";
    public static final String TBL_CASH_BILL_MAIN = "cash_bill_main";
    
    public static final int FLD_BILL_MAIN_ID      = 0;
    public static final int FLD_CASH_CASHIER_ID   = 1;
    public static final int FLD_LOCATION_ID       = 2;
    public static final int FLD_BILL_DATE         = 3;
    public static final int FLD_INVOICE_NO        = 4;
    public static final int FLD_APPUSER_ID        = 5;
    public static final int FLD_SHIFT_ID          = 6;
    public static final int FLD_DISC_TYPE         = 7;
    public static final int FLD_DISCOUNT          = 8;
    public static final int FLD_TAX_PERCENTAGE    = 9;
    public static final int FLD_TAX_VALUE         = 10;
    public static final int FLD_SERVICE_PCT       = 11;
    public static final int FLD_SERVICE_VALUE     = 12;
    public static final int FLD_BILL_STATUS       = 13;
    public static final int FLD_SALES_CODE        = 14;
    public static final int FLD_INVOICE_NUMBER    = 15;
    public static final int FLD_INVOICE_COUNTER   = 16;
    public static final int FLD_TRANS_TYPE        = 17;
    public static final int FLD_DOC_TYPE          = 18;
    
    public static final int FLD_CASH_PENDING_ORDER_ID = 19;
    public static final int FLD_CUSTOMER_ID = 20;
    public static final int FLD_TRANSCATION_TYPE = 21;
    public static final int FLD_TRANSACTION_STATUS = 22;
    public static final int FLD_COVER_NUMBER = 23;
    public static final int FLD_SPECIAL_ID = 24;
    public static final int FLD_SPECIAL_FLAG = 25;
    
    public static final int FLD_PARENT_ID = 26;
    
    public static final int FLD_GUEST_NAME = 27;
    public static final int FLD_NOTES = 28;
    
    public static final int FLD_CURRENCY_ID = 29;
    public static final int FLD_RATE = 30;
    public static final int FLD_PINJAMAN_ID = 31;
    public static final int FLD_STATUS_INVOICING = 32;
    
    /*private long cashPendingOrderId;
    private long customerId;
    private int transctionType;
    private int transactionStatus=0;
    private String coverNumber="";
    private long specialId;
    private int specialFlag;
     */
    public static final String[] fieldNames = {
        "CASH_BILL_MAIN_ID",
        "CASH_CASHIER_ID",
        "LOCATION_ID",
        "BILL_DATE",
        "BILL_NUMBER",
        "APP_USER_ID",
        "SHIFT_ID",
        "DISC_TYPE",
        "DISC",
        "TAX_PCT",
        "TAX_VALUE",
        "SERVICE_PCT",
        "SERVICE_VALUE",
        "BILL_STATUS",
        "SALES_CODE",
        "INVOICE_NUMBER",
        "INVOICE_COUNTER",
        "TRANS_TYPE",
        "DOC_TYPE" ,
        "CASH_PENDING_ORDER_ID",
        "CUSTOMER_ID",
        "TRANSACTION_TYPE",
        "TRANSACTION_STATUS",
        "COVER_NUMBER",
        "SPECIAL_ID",
        "SPECIAL_FLAG",        
        "PARENT_ID",        
        "GUEST_NAME",
        "NOTES",        
        "CURRENCY_ID",
        "RATE",
        "PINJAMAN_ID",
        "STATUS_INVOICING"
    };
    
    public static final  int[] fieldTypes = {
        TYPE_LONG + TYPE_PK + TYPE_ID,
        TYPE_LONG + TYPE_FK,
        TYPE_LONG + TYPE_FK,
        TYPE_DATE,
        TYPE_STRING,
        TYPE_LONG + TYPE_FK,
        TYPE_LONG + TYPE_FK,
        TYPE_INT,
        TYPE_FLOAT,
        TYPE_FLOAT,
        TYPE_FLOAT,
        TYPE_FLOAT,
        TYPE_FLOAT,
        TYPE_INT,
        TYPE_STRING,
        TYPE_STRING,
        TYPE_INT,
        TYPE_INT,
        TYPE_INT,
        
        TYPE_LONG,
        TYPE_LONG,
        TYPE_INT,
        TYPE_INT,
        TYPE_STRING,
        TYPE_LONG,
        TYPE_INT,
        
        TYPE_LONG,
        
        TYPE_STRING,
        TYPE_STRING,
        
        TYPE_LONG,
        TYPE_FLOAT,
        TYPE_LONG,
        TYPE_LONG
    };
    
    //Type penyimpanan transaksi
    public static final int TYPE_INTERNAL  = 0;
    public static final int TYPE_EXTERNAL  = 1;
    
    //Type document transaksi
    public static final int TYPE_INVOICE  = 0;
    public static final int TYPE_RETUR    = 1;
    public static final int TYPE_GIFT     = 2;
    public static final int TYPE_COST     = 3;
    public static final int TYPE_COMPLIMENT = 4;
    public static final int TYPE_IMVOICE_CLAIM = 5;
    
    public static String[][] transType={
        {"PENJUALAN","RETUR","HADIAH","INTERNAL","COMPLIMENT"},
        {"INVOICE","RETURN","GIFT","COST","COMPLIMENT","INVOICE CLAIM"}
    };
    
    //public static final int TYPE_OPEN_BILL=5;
    //public static final int TYPE_CREDIT_
    public static final int DISC_TYPE_PCT=0;
    public static final int DISC_TYPE_VALUE=1;
    
    //sale type
    public static final int SALE_NON_RECEIP= 0;
    public static final int SALE_RECEIP =1;
    
    //transaction type
    public static final int TRANS_TYPE_CASH = 0;
    public static final int TRANS_TYPE_CREDIT = 1;
    

    //transaction status
    public static final int TRANS_STATUS_CLOSE=0; // untuk penjualan cash
    public static final int TRANS_STATUS_OPEN =1; // untuk penjualan open bill ataupun credit
    public static final int TRANS_STATUS_DELETED =2;
    public static String[] saleTypes={
        "NON RESEP", "RESEP"
    };
    
    //price type
    public static final String DEFAULT_PRICE="00";
    public static final String PRICE_TYPE_01="01";
    public static final String PRICE_TYPE_02="02";
    public static final String PRICE_TYPE_03="03";  
    
    public static final int INVOICING_DRAFT = 0; //draft
    public static final int INVOICING_ON_PROSES = 1; //on proses
    public static final int INVOICING_FINISH = 2; //finish
    
    //constructor
    public PstBillMain(){
    }
    
    public PstBillMain(int i)throws DBException {
        super(new PstBillMain());
    }
    
    public PstBillMain(String sOid) throws DBException {
        super(new PstBillMain(0));
        if(!locate(sOid))
            throw new DBException(this,DBException.RECORD_NOT_FOUND);
        else
            return;
    }
    
    public PstBillMain(long lOid) throws DBException {
        super(new PstBillMain(0));
        String sOid="0";
        try {
            sOid = String.valueOf(lOid);
        }catch(Exception e) {
            throw new DBException(this,DBException.RECORD_NOT_FOUND);
        }
        if(!locate(sOid))
            throw new DBException(this,DBException.RECORD_NOT_FOUND);
        else
            return;
    }
    
    public int getFieldSize(){
        return fieldNames.length;
    }
    
    public String getTableName(){
        return TBL_CASH_BILL_MAIN;
    }
    
    public String[] getFieldNames(){
        return fieldNames;
    }
    
    public int[] getFieldTypes(){
        return fieldTypes;
    }
    
    public String getPersistentName(){
        return new PstBillDetail().getClass().getName();
    }
    
    public long fetchExc(Entity ent) throws Exception{
        BillMain billMain = fetchExc(ent.getOID());
        ent = (Entity)billMain;
        return billMain.getOID();
    }
    
    public long insertExc(Entity ent) throws Exception{
        return insertExc((BillMain) ent);
    }
    
    public long updateExc(Entity ent) throws Exception{
        return updateExc((BillMain) ent);
    }
    
    public long deleteExc(Entity ent) throws Exception{
        if(ent==null){
            throw new DBException(this,DBException.RECORD_NOT_FOUND);
        }
        return deleteExc(ent.getOID());
        
    }
    
    public static BillMain fetchExc(long oid) throws DBException {
        try {
            BillMain billMain = new BillMain();
            PstBillMain pstBillMain = new PstBillMain(oid);
            billMain.setOID(oid);
            billMain.setCashCashierId(pstBillMain.getlong(FLD_CASH_CASHIER_ID));
            billMain.setLocationId(pstBillMain.getlong(FLD_LOCATION_ID));
            billMain.setBillDate(pstBillMain.getDate(FLD_BILL_DATE));
            billMain.setInvoiceNo(pstBillMain.getString(FLD_INVOICE_NO));
            billMain.setAppUserId(pstBillMain.getlong(FLD_APPUSER_ID));
            billMain.setShiftId(pstBillMain.getlong(FLD_SHIFT_ID));
            billMain.setDiscType(pstBillMain.getInt(FLD_DISC_TYPE));
            billMain.setDiscount(pstBillMain.getdouble(FLD_DISCOUNT));
            billMain.setTaxPercentage(pstBillMain.getdouble(FLD_TAX_PERCENTAGE));
            billMain.setTaxValue(pstBillMain.getdouble(FLD_TAX_VALUE));
            billMain.setServicePct(pstBillMain.getdouble(FLD_SERVICE_PCT));
            billMain.setServiceValue(pstBillMain.getdouble(FLD_SERVICE_VALUE));
            billMain.setBillStatus(pstBillMain.getInt(FLD_BILL_STATUS));
            billMain.setSalesCode(pstBillMain.getString(FLD_SALES_CODE));
            
            billMain.setInvoiceNumber(pstBillMain.getString(FLD_INVOICE_NUMBER));
            billMain.setInvoiceCounter(pstBillMain.getInt(FLD_INVOICE_COUNTER));
            billMain.setTransType(pstBillMain.getInt(FLD_TRANS_TYPE));
            billMain.setDocType(pstBillMain.getInt(FLD_DOC_TYPE));
            
            billMain.setCashPendingOrderId(pstBillMain.getlong(FLD_CASH_PENDING_ORDER_ID));
            billMain.setCustomerId(pstBillMain.getlong(FLD_CUSTOMER_ID));
            billMain.setTransctionType(pstBillMain.getInt(FLD_TRANSCATION_TYPE));
            billMain.setTransactionStatus(pstBillMain.getInt(FLD_TRANSACTION_STATUS));
            billMain.setCoverNumber(pstBillMain.getString(FLD_COVER_NUMBER));
            billMain.setSpecialId(pstBillMain.getlong(FLD_SPECIAL_ID));
            billMain.setSpecialFlag(pstBillMain.getInt(FLD_SPECIAL_FLAG));
            
            billMain.setParentId(pstBillMain.getlong(FLD_PARENT_ID));
            
            billMain.setGuestName(pstBillMain.getString(FLD_GUEST_NAME));
            billMain.setNotes(pstBillMain.getString(FLD_NOTES));
            
            billMain.setCurrencyId(pstBillMain.getlong(FLD_CURRENCY_ID));
            billMain.setRate(pstBillMain.getdouble(FLD_RATE));
            billMain.setPinjamanId(pstBillMain.getlong(FLD_PINJAMAN_ID));
            billMain.setStatusInv(pstBillMain.getInt(FLD_STATUS_INVOICING));
            
            return billMain;
        }
        catch(DBException dbe) {
            System.out.println("error ="+dbe);
            throw dbe;
        }
        catch(Exception e) {
            System.out.println("error ="+e);
            throw new DBException(new PstBillMain(0),DBException.UNKNOWN);
        }
    }
    
    public static long insertExc(BillMain billMain) throws DBException {
        try {
            PstBillMain pstBillMain = new PstBillMain(0);
            pstBillMain.setLong(FLD_CASH_CASHIER_ID,billMain.getCashCashierId());
            pstBillMain.setLong(FLD_LOCATION_ID,billMain.getLocationId());
            pstBillMain.setDate(FLD_BILL_DATE,billMain.getBillDate());
            pstBillMain.setString(FLD_INVOICE_NO,billMain.getInvoiceNo());
            pstBillMain.setLong(FLD_APPUSER_ID,billMain.getAppUserId());
            pstBillMain.setLong(FLD_SHIFT_ID,billMain.getShiftId());
            pstBillMain.setInt(FLD_DISC_TYPE,billMain.getDiscType());
            pstBillMain.setDouble(FLD_DISCOUNT,billMain.getDiscount());
            pstBillMain.setDouble(FLD_TAX_PERCENTAGE,billMain.getTaxPercentage());
            pstBillMain.setDouble(FLD_TAX_VALUE,billMain.getTaxValue());
            pstBillMain.setDouble(FLD_SERVICE_PCT,billMain.getServicePct());
            pstBillMain.setDouble(FLD_SERVICE_VALUE,billMain.getServiceValue());
            pstBillMain.setInt(FLD_BILL_STATUS,billMain.getBillStatus());
            pstBillMain.setString(FLD_SALES_CODE,billMain.getSalesCode());
            
            
            pstBillMain.setString(FLD_INVOICE_NUMBER,billMain.getInvoiceNumber());
            pstBillMain.setInt(FLD_INVOICE_COUNTER,billMain.getInvoiceCounter());
            pstBillMain.setInt(FLD_TRANS_TYPE,billMain.getTransType());
            pstBillMain.setInt(FLD_DOC_TYPE,billMain.getDocType());
            
            pstBillMain.setLong(FLD_CASH_PENDING_ORDER_ID,billMain.getCashPendingOrderId());
            pstBillMain.setLong(FLD_CUSTOMER_ID,billMain.getCustomerId());
            pstBillMain.setInt(FLD_TRANSCATION_TYPE,billMain.getTransctionType());
            pstBillMain.setInt(FLD_TRANSACTION_STATUS,billMain.getTransactionStatus());
            pstBillMain.setString(FLD_COVER_NUMBER,billMain.getCoverNumber());
            pstBillMain.setLong(FLD_SPECIAL_ID,billMain.getSpecialId());
            pstBillMain.setInt(FLD_SPECIAL_FLAG,billMain.getSpecialFlag());
            
            pstBillMain.setLong(FLD_PARENT_ID,billMain.getParentId());
            
            pstBillMain.setString(FLD_GUEST_NAME,billMain.getGuestName());
            pstBillMain.setString(FLD_NOTES,billMain.getNotes());
            
            pstBillMain.setLong(FLD_CURRENCY_ID, billMain.getCurrencyId());
            pstBillMain.setDouble(FLD_RATE, billMain.getRate());
            pstBillMain.setLong(FLD_PINJAMAN_ID, billMain.getPinjamanId());
            pstBillMain.setInt(FLD_STATUS_INVOICING, billMain.getStatusInv());
            
            pstBillMain.insert();
            billMain.setOID(pstBillMain.getlong(FLD_BILL_MAIN_ID));
        }
        catch(DBException dbe) {
            throw dbe;
        }
        catch(Exception e) {
            throw new DBException(new PstBillMain(0),DBException.UNKNOWN);
        }
        return billMain.getOID();
    }

    public static long insertExcByOid(BillMain billMain) throws DBException {
        try {
            PstBillMain pstBillMain = new PstBillMain(0);
            pstBillMain.setLong(FLD_CASH_CASHIER_ID,billMain.getCashCashierId());
            pstBillMain.setLong(FLD_LOCATION_ID,billMain.getLocationId());
            pstBillMain.setDate(FLD_BILL_DATE,billMain.getBillDate());
            pstBillMain.setString(FLD_INVOICE_NO,billMain.getInvoiceNo());
            pstBillMain.setLong(FLD_APPUSER_ID,billMain.getAppUserId());
            pstBillMain.setLong(FLD_SHIFT_ID,billMain.getShiftId());
            pstBillMain.setInt(FLD_DISC_TYPE,billMain.getDiscType());
            pstBillMain.setDouble(FLD_DISCOUNT,billMain.getDiscount());
            pstBillMain.setDouble(FLD_TAX_PERCENTAGE,billMain.getTaxPercentage());
            pstBillMain.setDouble(FLD_TAX_VALUE,billMain.getTaxValue());
            pstBillMain.setDouble(FLD_SERVICE_PCT,billMain.getServicePct());
            pstBillMain.setDouble(FLD_SERVICE_VALUE,billMain.getServiceValue());
            pstBillMain.setInt(FLD_BILL_STATUS,billMain.getBillStatus());
            pstBillMain.setString(FLD_SALES_CODE,billMain.getSalesCode());


            pstBillMain.setString(FLD_INVOICE_NUMBER,billMain.getInvoiceNumber());
            pstBillMain.setInt(FLD_INVOICE_COUNTER,billMain.getInvoiceCounter());
            pstBillMain.setInt(FLD_TRANS_TYPE,billMain.getTransType());
            pstBillMain.setInt(FLD_DOC_TYPE,billMain.getDocType());

            pstBillMain.setLong(FLD_CASH_PENDING_ORDER_ID,billMain.getCashPendingOrderId());
            pstBillMain.setLong(FLD_CUSTOMER_ID,billMain.getCustomerId());
            pstBillMain.setInt(FLD_TRANSCATION_TYPE,billMain.getTransctionType());
            pstBillMain.setInt(FLD_TRANSACTION_STATUS,billMain.getTransactionStatus());
            pstBillMain.setString(FLD_COVER_NUMBER,billMain.getCoverNumber());
            pstBillMain.setLong(FLD_SPECIAL_ID,billMain.getSpecialId());
            pstBillMain.setInt(FLD_SPECIAL_FLAG,billMain.getSpecialFlag());

            pstBillMain.setLong(FLD_PARENT_ID,billMain.getParentId());

            pstBillMain.setString(FLD_GUEST_NAME,billMain.getGuestName());
            pstBillMain.setString(FLD_NOTES,billMain.getNotes());

            pstBillMain.setLong(FLD_CURRENCY_ID, billMain.getCurrencyId());
            pstBillMain.setDouble(FLD_RATE, billMain.getRate());
            pstBillMain.setLong(FLD_PINJAMAN_ID, billMain.getPinjamanId());
            pstBillMain.setInt(FLD_STATUS_INVOICING, billMain.getStatusInv());

            pstBillMain.insertByOid(billMain.getOID());
            //billMain.setOID(pstBillMain.getlong(FLD_BILL_MAIN_ID));
        }
        catch(DBException dbe) {
            throw dbe;
        }
        catch(Exception e) {
            throw new DBException(new PstBillMain(0),DBException.UNKNOWN);
        }
        return billMain.getOID();
    }


    public static long updateExc(BillMain billMain) throws DBException {
        try {
            if(billMain.getOID() != 0) {
                PstBillMain pstBillMain = new PstBillMain(billMain.getOID());
                pstBillMain.setLong(FLD_CASH_CASHIER_ID,billMain.getCashCashierId());
                pstBillMain.setLong(FLD_LOCATION_ID,billMain.getLocationId());
                pstBillMain.setDate(FLD_BILL_DATE,billMain.getBillDate());
                pstBillMain.setString(FLD_INVOICE_NO,billMain.getInvoiceNo());
                pstBillMain.setLong(FLD_APPUSER_ID,billMain.getAppUserId());
                pstBillMain.setLong(FLD_SHIFT_ID,billMain.getShiftId());
                pstBillMain.setInt(FLD_DISC_TYPE,billMain.getDiscType());
                pstBillMain.setDouble(FLD_DISCOUNT,billMain.getDiscount());
                pstBillMain.setDouble(FLD_TAX_PERCENTAGE,billMain.getTaxPercentage());
                pstBillMain.setDouble(FLD_TAX_VALUE,billMain.getTaxValue());
                pstBillMain.setDouble(FLD_SERVICE_PCT,billMain.getServicePct());
                pstBillMain.setDouble(FLD_SERVICE_VALUE,billMain.getServiceValue());
                pstBillMain.setInt(FLD_BILL_STATUS,billMain.getBillStatus());
                pstBillMain.setString(FLD_SALES_CODE,billMain.getSalesCode());
                
                pstBillMain.setString(FLD_INVOICE_NUMBER,billMain.getInvoiceNumber());
                pstBillMain.setInt(FLD_INVOICE_COUNTER,billMain.getInvoiceCounter());
                pstBillMain.setInt(FLD_TRANS_TYPE,billMain.getTransType());
                pstBillMain.setInt(FLD_DOC_TYPE,billMain.getDocType());
                
                
                pstBillMain.setLong(FLD_CASH_PENDING_ORDER_ID,billMain.getCashPendingOrderId());
                pstBillMain.setLong(FLD_CUSTOMER_ID,billMain.getCustomerId());
                pstBillMain.setInt(FLD_TRANSCATION_TYPE,billMain.getTransctionType());
                pstBillMain.setInt(FLD_TRANSACTION_STATUS,billMain.getTransactionStatus());
                pstBillMain.setString(FLD_COVER_NUMBER,billMain.getCoverNumber());
                pstBillMain.setLong(FLD_SPECIAL_ID,billMain.getSpecialId());
                pstBillMain.setInt(FLD_SPECIAL_FLAG,billMain.getSpecialFlag());
                
                pstBillMain.setLong(FLD_PARENT_ID,billMain.getParentId());
                
                pstBillMain.setString(FLD_GUEST_NAME, billMain.getGuestName());
                pstBillMain.setString(FLD_NOTES, billMain.getNotes());
                
                pstBillMain.setLong(FLD_CURRENCY_ID, billMain.getCurrencyId());
                pstBillMain.setDouble(FLD_RATE, billMain.getRate());
                pstBillMain.setLong(FLD_PINJAMAN_ID, billMain.getPinjamanId());
                pstBillMain.setInt(FLD_STATUS_INVOICING, billMain.getStatusInv());
                
                pstBillMain.update();
                return billMain.getOID();
            }
        }
        catch(DBException dbe) {
            throw dbe;
        }
        catch(Exception e) {
            throw new DBException(new PstBillMain(0),DBException.UNKNOWN);
        }
        return 0;
    }
    
    public static long deleteExc(long oid) throws DBException{
        try{
            PstBillMain pstBillMain = new PstBillMain(oid);
            pstBillMain.delete();
        }catch(DBException dbe){
            throw dbe;
        }catch(Exception e){
            throw new DBException(new PstBillMain(0),DBException.UNKNOWN);
        }
        return oid;
    }
    
    
    public static Vector list(int limitStart,int recordToGet, String whereClause, String order){
        Vector lists = new Vector();
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT * FROM " + TBL_CASH_BILL_MAIN;
            if(whereClause != null && whereClause.length() > 0)
                sql = sql + " WHERE " + whereClause;
            if(order != null && order.length() > 0)
                sql = sql + " ORDER BY " + order;
            
            switch (DBHandler.DBSVR_TYPE) {
                case DBHandler.DBSVR_MYSQL :
                    if(limitStart == 0 && recordToGet == 0)
                        sql = sql + "";
                    else
                        sql = sql + " LIMIT " + limitStart + ","+ recordToGet ;
                    break;
                case DBHandler.DBSVR_POSTGRESQL :
                    if(limitStart == 0 && recordToGet == 0)
                        sql = sql + "";
                    else
                        sql = sql + " LIMIT " +recordToGet + " OFFSET "+ limitStart ;
                    break;
                case DBHandler.DBSVR_SYBASE :
                    break;
                case DBHandler.DBSVR_ORACLE :
                    break;
                case DBHandler.DBSVR_MSSQL :
                    break;
                    
                default:
                    if(limitStart == 0 && recordToGet == 0)
                        sql = sql + "";
                    else
                        sql = sql + " LIMIT " + limitStart + ","+ recordToGet ;
            }
            
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while(rs.next()) {
                BillMain billMain = new BillMain();
                resultToObject(rs, billMain);
                lists.add(billMain);
            }
            rs.close();
            return lists;
            
        }catch(Exception e) {
            System.out.println(e);
        }finally {
            DBResultSet.close(dbrs);
        }
        return new Vector();
    }
    
    //+PerCashier
    public static Vector listPerCashier(int limitStart,int recordToGet, String whereClause, String order){
        Vector lists = new Vector();
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT * FROM " + TBL_CASH_BILL_MAIN + " CBM" +
                         " INNER JOIN " + PstCashCashier.TBL_CASH_CASHIER + " CSH" +
                         " ON CBM." + fieldNames[FLD_CASH_CASHIER_ID] +
                         " = CSH." + PstCashCashier.fieldNames[PstCashCashier.FLD_CASH_CASHIER_ID] +
                         " INNER JOIN " + PstCashMaster.TBL_CASH_MASTER + " MSTR" +
                         " ON CSH." + PstCashCashier.fieldNames[PstCashCashier.FLD_CASHMASTER_ID] +
                         " = MSTR." + PstCashMaster.fieldNames[PstCashMaster.FLD_CASH_MASTER_ID];
            if(whereClause != null && whereClause.length() > 0)
                sql = sql + " WHERE " + whereClause;
            if(order != null && order.length() > 0)
                sql = sql + " ORDER BY " + order;
    
            switch (DBHandler.DBSVR_TYPE) {
                case DBHandler.DBSVR_MYSQL :
                    if(limitStart == 0 && recordToGet == 0)
                        sql = sql + "";
                    else
                        sql = sql + " LIMIT " + limitStart + ","+ recordToGet ;
                    break;
                case DBHandler.DBSVR_POSTGRESQL :
                    if(limitStart == 0 && recordToGet == 0)
                        sql = sql + "";
                    else
                        sql = sql + " LIMIT " +recordToGet + " OFFSET "+ limitStart ;
                    break;
                case DBHandler.DBSVR_SYBASE :
                    break;
                case DBHandler.DBSVR_ORACLE :
                    break;
                case DBHandler.DBSVR_MSSQL :
                    break;

                default:
                    if(limitStart == 0 && recordToGet == 0)
                        sql = sql + "";
                    else
                        sql = sql + " LIMIT " + limitStart + ","+ recordToGet ;
            }
            System.out.println("SQL List PerCashier :" +sql);
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while(rs.next()) {
                BillMain billMain = new BillMain();
                resultToObject(rs, billMain);
                lists.add(billMain);
            }
            rs.close();
            return lists;

        }catch(Exception e) {
            System.out.println(e);
        }finally {
            DBResultSet.close(dbrs);
        }
        return new Vector();
    }

    /**
     *
     * @param whereClause
     * @return
     */
    public static int getCount(String whereClause) {
        int count = 0;
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT COUNT(" + fieldNames[FLD_BILL_MAIN_ID] + ") AS CNT FROM " + TBL_CASH_BILL_MAIN;
            if (whereClause != null && whereClause.length() > 0)
                sql = sql + " WHERE " + whereClause;
            
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                count = rs.getInt(1);
            }
            rs.close();
        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return count;
    }
    
    //count
  //+countPerCashier
    public static int getCountPerCashier(String whereClause) {
        int count = 0;
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT COUNT(" + fieldNames[FLD_BILL_MAIN_ID] + ") AS CNT FROM " + TBL_CASH_BILL_MAIN + " CBM" +
                         " INNER JOIN " + PstCashCashier.TBL_CASH_CASHIER + " CSH" +
                         " ON CBM." + fieldNames[FLD_CASH_CASHIER_ID] +
                         " = CSH." + PstCashCashier.fieldNames[PstCashCashier.FLD_CASH_CASHIER_ID] +
                         " INNER JOIN " + PstCashMaster.TBL_CASH_MASTER + " MSTR" +
                         " ON CSH." + PstCashCashier.fieldNames[PstCashCashier.FLD_CASHMASTER_ID] +
                         " = MSTR." + PstCashMaster.fieldNames[PstCashMaster.FLD_CASH_MASTER_ID];

            if (whereClause != null && whereClause.length() > 0)
                sql = sql + " WHERE " + whereClause;

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                count = rs.getInt(1);
            }
            rs.close();
        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return count;
    }


     //Summary Transaction
    public static double getSummaryTransaction(String whereClause) {
        double count = 0;
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT SUM(" + PstBillDetail.fieldNames[PstBillDetail.FLD_TOTAL_PRICE] + ")" +
            " FROM " + TBL_CASH_BILL_MAIN + " CBM" +
            " INNER JOIN " + PstBillDetail.TBL_CASH_BILL_DETAIL + " CBD" +
            " ON CBM." + fieldNames[FLD_BILL_MAIN_ID] +
            " = CBD." + PstBillDetail.fieldNames[PstBillDetail.FLD_BILL_MAIN_ID] +
            " WHERE " + whereClause;
            //" WHERE CBM." + PstCashCashier.fieldNames[PstCashCashier.FLD_CASH_CASHIER_ID]+
            //" = " + oidCashCashier;

            //if (whereClause != null && whereClause.length() > 0)
               // sql = sql + " WHERE " + whereClause;

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                count = rs.getDouble(1);
            }
            rs.close();

        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return count;

    }

    //summary Transaction
       public static Vector listSummaryTranscation(int limitStart,int recordToGet, String whereClause){
	Vector lists = new Vector();
	DBResultSet dbrs = null;
	try {
                 String sql = "SELECT CBM." + fieldNames[FLD_TRANSACTION_STATUS] +
                    " , CBM." + fieldNames[FLD_DOC_TYPE] +
                    " , CBM." + fieldNames[FLD_TRANSCATION_TYPE] +
                    //" , COUNT(CBM." + fieldNames[FLD_BILL_MAIN_ID] + ")" + " AS QTY_" + PstBillMain.fieldNames[PstBillMain.FLD_BILL_MAIN_ID] +
                    " , SUM(CBD." + PstBillDetail.fieldNames[PstBillDetail.FLD_TOTAL_PRICE] + ")" + " AS AMOUNT_" + PstBillDetail.fieldNames[PstBillDetail.FLD_TOTAL_PRICE] +
                    " FROM " + TBL_CASH_BILL_MAIN + " CBM" +
                    " INNER JOIN " + PstBillDetail.TBL_CASH_BILL_DETAIL + " CBD" +
                    " ON CBM." + fieldNames[FLD_BILL_MAIN_ID] +
                    " = CBD." + PstBillDetail.fieldNames[PstBillDetail.FLD_BILL_MAIN_ID] +
                    " WHERE " + whereClause +
                    " GROUP BY " + fieldNames[FLD_DOC_TYPE] +
                    ", CBM." + fieldNames[FLD_TRANSACTION_STATUS] +
                    ", CBM." + fieldNames[FLD_TRANSCATION_TYPE] +
                    " ORDER BY " + fieldNames[FLD_TRANSACTION_STATUS] + " DESC";

		    //if(whereClause != null && whereClause.length() > 0)
				//sql = sql + " WHERE " + whereClause;

			switch (DBHandler.DBSVR_TYPE) {
			case DBHandler.DBSVR_MYSQL :
			if(limitStart == 0 && recordToGet == 0)
				sql = sql + "";
			else
				sql = sql + " LIMIT " + limitStart + ","+ recordToGet ;
				 break;
			case DBHandler.DBSVR_POSTGRESQL :
 			if(limitStart == 0 && recordToGet == 0)
				sql = sql + "";
			else
				sql = sql + " LIMIT " +recordToGet + " OFFSET "+ limitStart ;
				 break;
			case DBHandler.DBSVR_SYBASE :
				 break;
			case DBHandler.DBSVR_ORACLE :
				 break;
			case DBHandler.DBSVR_MSSQL :
				 break;

			default:
                if(limitStart == 0 && recordToGet == 0)
                    sql = sql + "";
		else
                    sql = sql + " LIMIT " + limitStart + ","+ recordToGet ;
			}
                System.out.println("SQl Summary Transaction : " +sql);
                dbrs = DBHandler.execQueryResult(sql);
		ResultSet rs = dbrs.getResultSet();

                int count = 0;
		while(rs.next()) {
                Vector temp = new Vector();
                BillMain billMain = new BillMain();
                Billdetail billDetail = new Billdetail();


                billMain.setTransactionStatus(rs.getInt(1));
                billMain.setDocType(rs.getInt(2));
                billMain.setTransctionType(rs.getInt(3));
                //count = rs.getInt(4);
                temp.add(billMain);

                billDetail.setTotalPrice(rs.getDouble("AMOUNT_" + PstBillDetail.fieldNames[PstBillDetail.FLD_TOTAL_PRICE]));
                temp.add(billDetail);
                lists.add(temp);
            }
            rs.close();
            return lists;

        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return new Vector();
    }

     public static int getCountQtySummary(String whereClause, String whereClause2) {
        int count = 0;
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT COUNT(CBM." + fieldNames[FLD_BILL_MAIN_ID] + ") AS CNT " +
                         " FROM " + TBL_CASH_BILL_MAIN + " CBM" +
                    " INNER JOIN " + PstBillDetail.TBL_CASH_BILL_DETAIL + " CBD" +
                    " ON CBM." + fieldNames[FLD_BILL_MAIN_ID] +
                    " = CBD." + PstBillDetail.fieldNames[PstBillDetail.FLD_BILL_MAIN_ID] +
                    " WHERE " + whereClause +
                    " AND " + whereClause2 +
                    " GROUP BY " + fieldNames[FLD_DOC_TYPE] +
                    ", CBM." + fieldNames[FLD_TRANSACTION_STATUS] +
                    ", CBM." + fieldNames[FLD_TRANSCATION_TYPE] +
                    " ORDER BY " + fieldNames[FLD_TRANSACTION_STATUS];

            //if (whereClause != null && whereClause.length() > 0)
                //sql = sql + " WHERE " + whereClause;

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                count = rs.getInt(1);
            }
            rs.close();
        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return count;
    }

       public static double getSummaryTotalPrice(String whereClause, String whereClause2) {
        double count = 0;
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT  SUM(CBD." + PstBillDetail.fieldNames[PstBillDetail.FLD_TOTAL_PRICE] + ")" + " AS AMOUNT_" + PstBillDetail.fieldNames[PstBillDetail.FLD_TOTAL_PRICE] +
                    " FROM " + TBL_CASH_BILL_MAIN + " CBM" +
                    " INNER JOIN " + PstBillDetail.TBL_CASH_BILL_DETAIL + " CBD" +
                    " ON CBM." + fieldNames[FLD_BILL_MAIN_ID] +
                    " = CBD." + PstBillDetail.fieldNames[PstBillDetail.FLD_BILL_MAIN_ID] +
                    " WHERE " + whereClause +
                    " AND " + whereClause2 +
                    " GROUP BY " + fieldNames[FLD_DOC_TYPE] +
                    ", CBM." + fieldNames[FLD_TRANSACTION_STATUS] +
                    ", CBM." + fieldNames[FLD_TRANSCATION_TYPE] +
                    " ORDER BY " + fieldNames[FLD_TRANSACTION_STATUS];

            //if (whereClause != null && whereClause.length() > 0)
               // sql = sql + " WHERE " + whereClause;

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                count = rs.getDouble(1);
            }
            rs.close();

        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return count;

    }

    //Summary Transaction
       //Open Bill
      public static double getSummaryOpenBill(long oidCashCashier) {
        double count = 0;
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT  SUM(CBD." + PstBillDetail.fieldNames[PstBillDetail.FLD_TOTAL_PRICE] + ")" + " AS AMOUNT_" + PstBillDetail.fieldNames[PstBillDetail.FLD_TOTAL_PRICE] +
                    " FROM " + TBL_CASH_BILL_MAIN + " CBM" +
                    " INNER JOIN " + PstBillDetail.TBL_CASH_BILL_DETAIL + " CBD" +
                    " ON CBM." + fieldNames[FLD_BILL_MAIN_ID] +
                    " = CBD." + PstBillDetail.fieldNames[PstBillDetail.FLD_BILL_MAIN_ID] +
                    " WHERE CBM." + fieldNames[FLD_CASH_CASHIER_ID] +
                    " = " + oidCashCashier +
                    " AND " + PstBillMain.fieldNames[PstBillMain.FLD_DOC_TYPE] + " =0" +
                    " AND " + PstBillMain.fieldNames[PstBillMain.FLD_TRANSCATION_TYPE] + "=0" +
                    " AND " + PstBillMain.fieldNames[PstBillMain.FLD_TRANSACTION_STATUS] + "=1" +
                    " ORDER BY " + fieldNames[FLD_TRANSACTION_STATUS];

            //if (whereClause != null && whereClause.length() > 0)
               // sql = sql + " WHERE " + whereClause;

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                count = rs.getDouble(1);
            }
            rs.close();

        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return count;

    }
      //count Open Bill
      public static int getCountQtySummaryOpenBill(long oidCashCashier) {
        int count = 0;
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT COUNT(CBM." + fieldNames[FLD_BILL_MAIN_ID] + ") AS CNT " +
                         " FROM " + TBL_CASH_BILL_MAIN + " CBM" +
                    " INNER JOIN " + PstBillDetail.TBL_CASH_BILL_DETAIL + " CBD" +
                    " ON CBM." + fieldNames[FLD_BILL_MAIN_ID] +
                    " = CBD." + PstBillDetail.fieldNames[PstBillDetail.FLD_BILL_MAIN_ID] +
                    " WHERE CBM." + fieldNames[FLD_CASH_CASHIER_ID] +
                    " = " + oidCashCashier +
                    " AND " + PstBillMain.fieldNames[PstBillMain.FLD_DOC_TYPE] + " =0" +
                    " AND " + PstBillMain.fieldNames[PstBillMain.FLD_TRANSCATION_TYPE] + "=0" +
                    " AND " + PstBillMain.fieldNames[PstBillMain.FLD_TRANSACTION_STATUS] + "=1" +
                    " ORDER BY " + fieldNames[FLD_TRANSACTION_STATUS];

            //if (whereClause != null && whereClause.length() > 0)
                //sql = sql + " WHERE " + whereClause;

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                count = rs.getInt(1);
            }
            rs.close();
        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return count;
    }


      //Return
      public static double getSummaryReturn(long oidCashCashier) {
        double count = 0;
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT  SUM(CBD." + PstBillDetail.fieldNames[PstBillDetail.FLD_TOTAL_PRICE] + ")" + " AS AMOUNT_" + PstBillDetail.fieldNames[PstBillDetail.FLD_TOTAL_PRICE] +
                    " FROM " + TBL_CASH_BILL_MAIN + " CBM" +
                    " INNER JOIN " + PstBillDetail.TBL_CASH_BILL_DETAIL + " CBD" +
                    " ON CBM." + fieldNames[FLD_BILL_MAIN_ID] +
                    " = CBD." + PstBillDetail.fieldNames[PstBillDetail.FLD_BILL_MAIN_ID] +
                    " WHERE CBM." + fieldNames[FLD_CASH_CASHIER_ID] +
                    " = " + oidCashCashier +
                    " AND " + PstBillMain.fieldNames[PstBillMain.FLD_DOC_TYPE] + " =1" +
                    " AND " + PstBillMain.fieldNames[PstBillMain.FLD_TRANSCATION_TYPE] + "=0" +
                    " AND " + PstBillMain.fieldNames[PstBillMain.FLD_TRANSACTION_STATUS] + "=0" +
                    " ORDER BY " + fieldNames[FLD_TRANSACTION_STATUS];

            //if (whereClause != null && whereClause.length() > 0)
               // sql = sql + " WHERE " + whereClause;

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                count = rs.getDouble(1);
            }
            rs.close();

        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return count;
    }

      //count Return
      public static int getCountQtySummaryReturn(long oidCashCashier) {
        int count = 0;
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT COUNT(CBM." + fieldNames[FLD_BILL_MAIN_ID] + ") AS CNT " +
                         " FROM " + TBL_CASH_BILL_MAIN + " CBM" +
                    " INNER JOIN " + PstBillDetail.TBL_CASH_BILL_DETAIL + " CBD" +
                    " ON CBM." + fieldNames[FLD_BILL_MAIN_ID] +
                    " = CBD." + PstBillDetail.fieldNames[PstBillDetail.FLD_BILL_MAIN_ID] +
                    " WHERE CBM." + fieldNames[FLD_CASH_CASHIER_ID] +
                    " = " + oidCashCashier +
                    " AND " + PstBillMain.fieldNames[PstBillMain.FLD_DOC_TYPE] + " =1" +
                    " AND " + PstBillMain.fieldNames[PstBillMain.FLD_TRANSCATION_TYPE] + "=0" +
                    " AND " + PstBillMain.fieldNames[PstBillMain.FLD_TRANSACTION_STATUS] + "=0" +
                    " ORDER BY " + fieldNames[FLD_TRANSACTION_STATUS];

            //if (whereClause != null && whereClause.length() > 0)
                //sql = sql + " WHERE " + whereClause;

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                count = rs.getInt(1);
            }
            rs.close();
        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return count;
    }


     //Cancel
      public static double getSummaryCancel(long oidCashCashier) {
        double count = 0;
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT  SUM(CBD." + PstBillDetail.fieldNames[PstBillDetail.FLD_TOTAL_PRICE] + ")" + " AS AMOUNT_" + PstBillDetail.fieldNames[PstBillDetail.FLD_TOTAL_PRICE] +
                    " FROM " + TBL_CASH_BILL_MAIN + " CBM" +
                    " INNER JOIN " + PstBillDetail.TBL_CASH_BILL_DETAIL + " CBD" +
                    " ON CBM." + fieldNames[FLD_BILL_MAIN_ID] +
                    " = CBD." + PstBillDetail.fieldNames[PstBillDetail.FLD_BILL_MAIN_ID] +
                    " WHERE CBM." + fieldNames[FLD_CASH_CASHIER_ID] +
                    " = " + oidCashCashier +
                    " AND " + PstBillMain.fieldNames[PstBillMain.FLD_DOC_TYPE] + " =0" +
                    " AND " + PstBillMain.fieldNames[PstBillMain.FLD_TRANSCATION_TYPE] + "=0" +
                    " AND " + PstBillMain.fieldNames[PstBillMain.FLD_TRANSACTION_STATUS] + "=2" +
                    " ORDER BY " + fieldNames[FLD_TRANSACTION_STATUS];

            //if (whereClause != null && whereClause.length() > 0)
               // sql = sql + " WHERE " + whereClause;

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                count = rs.getDouble(1);
            }
            rs.close();

        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return count;
    }

      //count Cancel
      public static int getCountQtySummaryCancel(long oidCashCashier) {
        int count = 0;
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT COUNT(CBM." + fieldNames[FLD_BILL_MAIN_ID] + ") AS CNT " +
                         " FROM " + TBL_CASH_BILL_MAIN + " CBM" +
                    " INNER JOIN " + PstBillDetail.TBL_CASH_BILL_DETAIL + " CBD" +
                    " ON CBM." + fieldNames[FLD_BILL_MAIN_ID] +
                    " = CBD." + PstBillDetail.fieldNames[PstBillDetail.FLD_BILL_MAIN_ID] +
                    " WHERE CBM." + fieldNames[FLD_CASH_CASHIER_ID] +
                    " = " + oidCashCashier +
                    " AND " + PstBillMain.fieldNames[PstBillMain.FLD_DOC_TYPE] + " =0" +
                    " AND " + PstBillMain.fieldNames[PstBillMain.FLD_TRANSCATION_TYPE] + "=0" +
                    " AND " + PstBillMain.fieldNames[PstBillMain.FLD_TRANSACTION_STATUS] + "=2" +
                    " ORDER BY " + fieldNames[FLD_TRANSACTION_STATUS];

            //if (whereClause != null && whereClause.length() > 0)
                //sql = sql + " WHERE " + whereClause;

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                count = rs.getInt(1);
            }
            rs.close();
        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return count;
    }

      //Cash
      public static double getSummaryCash(long oidCashCashier) {
        double count = 0;
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT  SUM(CBD." + PstBillDetail.fieldNames[PstBillDetail.FLD_TOTAL_PRICE] + ")" + " AS AMOUNT_" + PstBillDetail.fieldNames[PstBillDetail.FLD_TOTAL_PRICE] +
                    " FROM " + TBL_CASH_BILL_MAIN + " CBM" +
                    " INNER JOIN " + PstBillDetail.TBL_CASH_BILL_DETAIL + " CBD" +
                    " ON CBM." + fieldNames[FLD_BILL_MAIN_ID] +
                    " = CBD." + PstBillDetail.fieldNames[PstBillDetail.FLD_BILL_MAIN_ID] +
                    " WHERE CBM." + fieldNames[FLD_CASH_CASHIER_ID] +
                    " = " + oidCashCashier +
                    " AND " + PstBillMain.fieldNames[PstBillMain.FLD_DOC_TYPE] + " =0" +
                    " AND " + PstBillMain.fieldNames[PstBillMain.FLD_TRANSCATION_TYPE] + "=0" +
                    " AND " + PstBillMain.fieldNames[PstBillMain.FLD_TRANSACTION_STATUS] + "=0" +
                    " ORDER BY " + fieldNames[FLD_TRANSACTION_STATUS];

            //if (whereClause != null && whereClause.length() > 0)
               // sql = sql + " WHERE " + whereClause;

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                count = rs.getDouble(1);
            }
            rs.close();

        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return count;

    }
      //count Cash
      public static int getCountQtySummaryCash(long oidCashCashier) {
        int count = 0;
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT COUNT(CBM." + fieldNames[FLD_BILL_MAIN_ID] + ") AS CNT " +
                         " FROM " + TBL_CASH_BILL_MAIN + " CBM" +
                    " INNER JOIN " + PstBillDetail.TBL_CASH_BILL_DETAIL + " CBD" +
                    " ON CBM." + fieldNames[FLD_BILL_MAIN_ID] +
                    " = CBD." + PstBillDetail.fieldNames[PstBillDetail.FLD_BILL_MAIN_ID] +
                    " WHERE CBM." + fieldNames[FLD_CASH_CASHIER_ID] +
                    " = " + oidCashCashier +
                    " AND " + PstBillMain.fieldNames[PstBillMain.FLD_DOC_TYPE] + " =0" +
                    " AND " + PstBillMain.fieldNames[PstBillMain.FLD_TRANSCATION_TYPE] + "=0" +
                    " AND " + PstBillMain.fieldNames[PstBillMain.FLD_TRANSACTION_STATUS] + "=0" +
                    " ORDER BY " + fieldNames[FLD_TRANSACTION_STATUS];

            //if (whereClause != null && whereClause.length() > 0)
                //sql = sql + " WHERE " + whereClause;

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                count = rs.getInt(1);
            }
            rs.close();
        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return count;
    }


    //Sales Credit
      public static double getSummarySalesCredit(long oidCashCashier) {
        double count = 0;
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT  SUM(CBD." + PstBillDetail.fieldNames[PstBillDetail.FLD_TOTAL_PRICE] + ")" + " AS AMOUNT_" + PstBillDetail.fieldNames[PstBillDetail.FLD_TOTAL_PRICE] +
                    " FROM " + TBL_CASH_BILL_MAIN + " CBM" +
                    " INNER JOIN " + PstBillDetail.TBL_CASH_BILL_DETAIL + " CBD" +
                    " ON CBM." + fieldNames[FLD_BILL_MAIN_ID] +
                    " = CBD." + PstBillDetail.fieldNames[PstBillDetail.FLD_BILL_MAIN_ID] +
                    " WHERE CBM." + fieldNames[FLD_CASH_CASHIER_ID] +
                    " = " + oidCashCashier +
                    " AND " + PstBillMain.fieldNames[PstBillMain.FLD_DOC_TYPE] + " =0" +
                    " AND " + PstBillMain.fieldNames[PstBillMain.FLD_TRANSCATION_TYPE] + "=1" +
                    " AND " + PstBillMain.fieldNames[PstBillMain.FLD_TRANSACTION_STATUS] + "=1" +
                    " ORDER BY " + fieldNames[FLD_TRANSACTION_STATUS];

            //if (whereClause != null && whereClause.length() > 0)
               // sql = sql + " WHERE " + whereClause;

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                count = rs.getDouble(1);
            }
            rs.close();

        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return count;

    }

      //count Sales Credit
      public static int getCountQtySummarySalesCredit(long oidCashCashier) {
        int count = 0;
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT COUNT(CBM." + fieldNames[FLD_BILL_MAIN_ID] + ") AS CNT " +
                         " FROM " + TBL_CASH_BILL_MAIN + " CBM" +
                    " INNER JOIN " + PstBillDetail.TBL_CASH_BILL_DETAIL + " CBD" +
                    " ON CBM." + fieldNames[FLD_BILL_MAIN_ID] +
                    " = CBD." + PstBillDetail.fieldNames[PstBillDetail.FLD_BILL_MAIN_ID] +
                    " WHERE CBM." + fieldNames[FLD_CASH_CASHIER_ID] +
                    " = " + oidCashCashier +
                    " AND " + PstBillMain.fieldNames[PstBillMain.FLD_DOC_TYPE] + " =0" +
                    " AND " + PstBillMain.fieldNames[PstBillMain.FLD_TRANSCATION_TYPE] + "=1" +
                    " AND " + PstBillMain.fieldNames[PstBillMain.FLD_TRANSACTION_STATUS] + "=1" +
                    " ORDER BY " + fieldNames[FLD_TRANSACTION_STATUS];

            //if (whereClause != null && whereClause.length() > 0)
                //sql = sql + " WHERE " + whereClause;

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                count = rs.getInt(1);
            }
            rs.close();
        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return count;
    }




    public static void resultToObject(ResultSet rs, BillMain billMain) {
        try {
            billMain.setOID(rs.getLong(PstBillMain.fieldNames[PstBillMain.FLD_BILL_MAIN_ID]));
            billMain.setCashCashierId(rs.getLong(PstBillMain.fieldNames[PstBillMain.FLD_CASH_CASHIER_ID]));
            billMain.setLocationId(rs.getLong(PstBillMain.fieldNames[PstBillMain.FLD_LOCATION_ID]));
            Date date = DBHandler.convertDate(rs.getDate(PstBillMain.fieldNames[PstBillMain.FLD_BILL_DATE]),rs.getTime(PstBillMain.fieldNames[PstBillMain.FLD_BILL_DATE]));
            billMain.setBillDate(date);
            billMain.setInvoiceNo(rs.getString(PstBillMain.fieldNames[PstBillMain.FLD_INVOICE_NO]));
            billMain.setAppUserId(rs.getLong(PstBillMain.fieldNames[PstBillMain.FLD_APPUSER_ID]));
            billMain.setShiftId(rs.getLong(PstBillMain.fieldNames[PstBillMain.FLD_SHIFT_ID]));
            billMain.setDiscType(rs.getInt(PstBillMain.fieldNames[PstBillMain.FLD_DISC_TYPE]));
            billMain.setDiscount(rs.getDouble(PstBillMain.fieldNames[PstBillMain.FLD_DISCOUNT]));
            billMain.setTaxPercentage(rs.getDouble(PstBillMain.fieldNames[PstBillMain.FLD_TAX_PERCENTAGE]));
            billMain.setTaxValue(rs.getDouble(PstBillMain.fieldNames[PstBillMain.FLD_TAX_VALUE]));
            billMain.setServicePct(rs.getDouble(PstBillMain.fieldNames[PstBillMain.FLD_SERVICE_PCT]));
            billMain.setServiceValue(rs.getDouble(PstBillMain.fieldNames[PstBillMain.FLD_SERVICE_VALUE]));
            billMain.setBillStatus(rs.getInt(PstBillMain.fieldNames[PstBillMain.FLD_BILL_STATUS]));
            billMain.setSalesCode(rs.getString(PstBillMain.fieldNames[PstBillMain.FLD_SALES_CODE]));
            
            billMain.setInvoiceNumber(rs.getString(PstBillMain.fieldNames[PstBillMain.FLD_INVOICE_NUMBER]));
            billMain.setInvoiceCounter(rs.getInt(PstBillMain.fieldNames[PstBillMain.FLD_INVOICE_COUNTER]));
            billMain.setTransType(rs.getInt(PstBillMain.fieldNames[PstBillMain.FLD_TRANS_TYPE]));
            billMain.setDocType(rs.getInt(PstBillMain.fieldNames[PstBillMain.FLD_DOC_TYPE]));
            
            
            billMain.setCashPendingOrderId(rs.getLong(PstBillMain.fieldNames[PstBillMain.FLD_CASH_PENDING_ORDER_ID]));
            billMain.setCustomerId(rs.getLong(PstBillMain.fieldNames[PstBillMain.FLD_CUSTOMER_ID]));
            billMain.setTransctionType(rs.getInt(PstBillMain.fieldNames[PstBillMain.FLD_TRANSCATION_TYPE]));
            billMain.setTransactionStatus(rs.getInt(PstBillMain.fieldNames[PstBillMain.FLD_TRANSACTION_STATUS]));
            billMain.setCoverNumber(rs.getString(PstBillMain.fieldNames[PstBillMain.FLD_COVER_NUMBER]));
            billMain.setSpecialId(rs.getLong(PstBillMain.fieldNames[PstBillMain.FLD_SPECIAL_ID]));
            billMain.setSpecialFlag(rs.getInt(PstBillMain.fieldNames[PstBillMain.FLD_SPECIAL_FLAG]));
            
            billMain.setParentId(rs.getLong(PstBillMain.fieldNames[PstBillMain.FLD_PARENT_ID]));
            
            billMain.setGuestName(rs.getString(PstBillMain.fieldNames[PstBillMain.FLD_GUEST_NAME]));
            billMain.setNotes(rs.getString(PstBillMain.fieldNames[PstBillMain.FLD_NOTES]));
            
            billMain.setCurrencyId(rs.getLong(PstBillMain.fieldNames[PstBillMain.FLD_CURRENCY_ID]));
            billMain.setRate(rs.getDouble(PstBillMain.fieldNames[PstBillMain.FLD_RATE]));
            billMain.setPinjamanId(rs.getLong(PstBillMain.fieldNames[PstBillMain.FLD_PINJAMAN_ID]));
            billMain.setStatusInv(rs.getInt(PstBillMain.fieldNames[PstBillMain.FLD_STATUS_INVOICING]));
            
        }
        catch(Exception e) {
            System.out.println("err on result to object :  "+e.toString());
            e.printStackTrace();
        }
    }
    
    public static boolean checkOID(long cashBillMainId) {
        DBResultSet dbrs = null;
        boolean result = false;
        try {
            String sql = "SELECT * FROM " + TBL_CASH_BILL_MAIN +
            " WHERE " + PstBillMain.fieldNames[PstBillMain.FLD_BILL_MAIN_ID] +
            " = " + cashBillMainId;
            
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            
            while(rs.next()) {
                result = true;
            }
            rs.close();
        }
        catch(Exception e) {
            System.out.println("err : "+e.toString());
        }
        finally {
            DBResultSet.close(dbrs);
        }
        return result;
    }
    
    /**
     * bobo
     * pembuatan number invoice yang di counter berdasarkan
     * lokasi dan cashier number
     * retrun = TTBBCCCCC
     * TT = tahun
     * BB = bulan
     * CCCCC = counter
     */
    public static String generateNumberInvoice(Date dtNow, long locationId, int cashierNumber,int docType){
        //Date dtNow = billMain.getBillDate();
        String invoiceNumber = "";
        try{
            invoiceNumber = Formater.formatDate(dtNow,"yy");
            invoiceNumber = invoiceNumber + Formater.formatDate(dtNow,"MM");
            
            int counter = getCounterTransaction(locationId,cashierNumber,docType);
            //if(counter > 99999)
            // counter = 1;
            
            String maxCounter = "99999";
            int count = maxCounter.length() - String.valueOf(counter).length();
            if(count>0){
                for(int k=0;k<count;k++){
                    invoiceNumber = invoiceNumber + "0";
                }
            }
            invoiceNumber = invoiceNumber + String.valueOf(counter);
            
        }catch(Exception e){
            System.out.println("ERR GENERATE INVOICE NUMBER : "+e.toString());
        }
        return invoiceNumber;
    }
    
    public static String generateNumberInvoice(Date dtNow, int docType){
        //Date dtNow = billMain.getBillDate();
        String invoiceNumber = "";
        try{
            invoiceNumber = Formater.formatDate(dtNow,"yy");
            invoiceNumber = invoiceNumber + Formater.formatDate(dtNow,"MM");
            
            int counter = getCounterTransaction(docType);
            //if(counter > 99999)
            // counter = 1;
            
            String maxCounter = "99999";
            int count = maxCounter.length() - String.valueOf(counter).length();
            if(count>0){
                for(int k=0;k<count;k++){
                    invoiceNumber = invoiceNumber + "0";
                }
            }
            invoiceNumber = invoiceNumber + String.valueOf(counter);
            
        }catch(Exception e){
            System.out.println("ERR GENERATE INVOICE NUMBER : "+e.toString());
        }
        return invoiceNumber;
    }
    
    /**
     * bobo
     * pencarian counter yang terbesar sesuai dengan lokasi dan cashier number
     * return adalah int counter yang sudah di tambah dengan 1
     */
    public static int getCounterTransaction(long locationId, int cashierNumber,int docType){
        DBResultSet dbrs = null;
        int count = 0;
        try {
            String sql = "SELECT MAX(" + PstBillMain.fieldNames[PstBillMain.FLD_INVOICE_COUNTER] +") AS MNT "+
            " FROM "+ TBL_CASH_BILL_MAIN + " AS BILL INNER JOIN "+PstCashCashier.TBL_CASH_CASHIER+" AS CSH "+
            " ON BILL."+PstBillMain.fieldNames[PstBillMain.FLD_CASH_CASHIER_ID]+" = CSH."+PstCashCashier.fieldNames[PstCashCashier.FLD_CASH_CASHIER_ID]+
            " INNER JOIN "+PstCashMaster.TBL_CASH_MASTER+" AS MSTR "+
            " ON CSH."+PstCashCashier.fieldNames[PstCashCashier.FLD_CASHMASTER_ID]+" = MSTR."+PstCashMaster.fieldNames[PstCashMaster.FLD_CASH_MASTER_ID]+
            " WHERE BILL." + PstBillMain.fieldNames[PstBillMain.FLD_LOCATION_ID] + " = "+locationId+
            " AND MSTR."+PstCashMaster.fieldNames[PstCashMaster.FLD_CASHIER_NUMBER]+"="+cashierNumber+
            " AND BILL." + PstBillMain.fieldNames[PstBillMain.FLD_DOC_TYPE] + " = "+docType;
            
            //System.out.println("SQL > "+sql);
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            
            while(rs.next()) {
                count = rs.getInt("MNT");
            }
            rs.close();
            count = count + 1;
            return count;
        }
        catch(Exception e) {
            System.out.println("err : "+e.toString());
        }
        finally {
            DBResultSet.close(dbrs);
        }
        return count;
    }
    
    public static int getCounterTransaction(int docType){
        DBResultSet dbrs = null;
        int count = 0;
        try {
            String sql = "SELECT MAX(" + PstBillMain.fieldNames[PstBillMain.FLD_INVOICE_COUNTER] +") AS MNT "+
            " FROM "+ TBL_CASH_BILL_MAIN + " AS BILL "+
            " WHERE BILL." + PstBillMain.fieldNames[PstBillMain.FLD_DOC_TYPE] + " = "+docType;
            
            //System.out.println("SQL > "+sql);
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            
            while(rs.next()) {
                count = rs.getInt("MNT");
            }
            rs.close();
            count = count + 1;
            return count;
        }
        catch(Exception e) {
            System.out.println("err : "+e.toString());
        }
        finally {
            DBResultSet.close(dbrs);
        }
        return count;
    }
    
    /* set billmain with counter, bill number, invoice number */
    public static BillMain setBillMain(){
        return new BillMain();
    }
    
    public static BillMain findByInvoiceNumber(String invoiceNumber){
        BillMain found = null;
        String whereClause = PstBillMain.fieldNames[PstBillMain.FLD_INVOICE_NUMBER]+"='"+invoiceNumber+"' ";
        Vector result = PstBillMain.list(0, 1, whereClause,"");
        if(result.size()>0){
            BillMain temp = (BillMain)result.get(0);
            found = temp;
        }
        return found;
    }
    
    public static void main(String[] args){
        try{
            BillMain billMain = new BillMain();
            billMain.setBillDate(new Date());
            billMain.setLocationId(504404223189962406L);
            System.out.println("COUNTER : "+getCounterTransaction(1,1,0));
            System.out.println("COUNTER : "+generateNumberInvoice(new Date(),1,1,0));
            
        }catch(Exception e){}
    }
    
     public static long syncExc(JSONObject jSONObject) {
        long oid = 0;
        if (jSONObject != null) {
            oid = jSONObject.optLong(PstBillMain.fieldNames[PstBillMain.FLD_BILL_MAIN_ID], 0);
            if (oid > 0) {
                BillMain billMain = new BillMain();
                billMain.setOID(jSONObject.optLong(PstBillMain.fieldNames[PstBillMain.FLD_BILL_MAIN_ID], 0));
                billMain.setCashCashierId(jSONObject.optLong(PstBillMain.fieldNames[PstBillMain.FLD_CASH_CASHIER_ID], 0));
                billMain.setLocationId(jSONObject.optLong(PstBillMain.fieldNames[PstBillMain.FLD_LOCATION_ID], 0));
                billMain.setBillDate(jSONObject.optDate(PstBillMain.fieldNames[PstBillMain.FLD_BILL_DATE], 0));
                billMain.setInvoiceNo(jSONObject.optString(PstBillMain.fieldNames[PstBillMain.FLD_INVOICE_NO], ""));
                billMain.setAppUserId(jSONObject.optLong(PstBillMain.fieldNames[PstBillMain.FLD_APPUSER_ID], 0));
                billMain.setShiftId(jSONObject.optLong(PstBillMain.fieldNames[PstBillMain.FLD_SHIFT_ID], 0));
                billMain.setDiscType(jSONObject.optInt(PstBillMain.fieldNames[PstBillMain.FLD_DISC_TYPE], 0));
                billMain.setDiscount(jSONObject.optDouble(PstBillMain.fieldNames[PstBillMain.FLD_DISCOUNT], 0));
                billMain.setTaxPercentage(jSONObject.optDouble(PstBillMain.fieldNames[PstBillMain.FLD_TAX_PERCENTAGE], 0));
                billMain.setTaxValue(jSONObject.optDouble(PstBillMain.fieldNames[PstBillMain.FLD_TAX_VALUE], 0));
                billMain.setServicePct(jSONObject.optDouble(PstBillMain.fieldNames[PstBillMain.FLD_SERVICE_PCT],0));
                billMain.setServiceValue(jSONObject.optDouble(PstBillMain.fieldNames[PstBillMain.FLD_SERVICE_VALUE], 0));
                billMain.setBillStatus(jSONObject.optInt(PstBillMain.fieldNames[PstBillMain.FLD_BILL_STATUS], 0));
                billMain.setSalesCode(jSONObject.optString(PstBillMain.fieldNames[PstBillMain.FLD_SALES_CODE], ""));
                billMain.setInvoiceNumber(jSONObject.optString(PstBillMain.fieldNames[PstBillMain.FLD_INVOICE_NUMBER], ""));
                billMain.setInvoiceCounter(jSONObject.optInt(PstBillMain.fieldNames[PstBillMain.FLD_INVOICE_COUNTER], 0));
                billMain.setTransType(jSONObject.optInt(PstBillMain.fieldNames[PstBillMain.FLD_TRANS_TYPE], 0));
                billMain.setDocType(jSONObject.optInt(PstBillMain.fieldNames[PstBillMain.FLD_DOC_TYPE], 0));
                billMain.setCashPendingOrderId(jSONObject.optLong(PstBillMain.fieldNames[PstBillMain.FLD_CASH_PENDING_ORDER_ID], 0));
                billMain.setCustomerId(jSONObject.optLong(PstBillMain.fieldNames[PstBillMain.FLD_CUSTOMER_ID], 0));
                billMain.setTransctionType(jSONObject.optInt(PstBillMain.fieldNames[PstBillMain.FLD_TRANSCATION_TYPE], 0));
                billMain.setTransactionStatus(jSONObject.optInt(PstBillMain.fieldNames[PstBillMain.FLD_TRANSACTION_STATUS],0));
                billMain.setCoverNumber(jSONObject.optString(PstBillMain.fieldNames[PstBillMain.FLD_COVER_NUMBER], ""));
                billMain.setSpecialId(jSONObject.optLong(PstBillMain.fieldNames[PstBillMain.FLD_SPECIAL_ID], 0));
                billMain.setSpecialFlag(jSONObject.optInt(PstBillMain.fieldNames[PstBillMain.FLD_SPECIAL_FLAG], 0));
                billMain.setParentId(jSONObject.optLong(PstBillMain.fieldNames[PstBillMain.FLD_PARENT_ID], 0));
                billMain.setGuestName(jSONObject.optString(PstBillMain.fieldNames[PstBillMain.FLD_GUEST_NAME], ""));
                billMain.setNotes(jSONObject.optString(PstBillMain.fieldNames[PstBillMain.FLD_NOTES], ""));
                billMain.setCurrencyId(jSONObject.optLong(PstBillMain.fieldNames[PstBillMain.FLD_CURRENCY_ID], 0));
                billMain.setRate(jSONObject.optDouble(PstBillMain.fieldNames[PstBillMain.FLD_RATE], 0));
                billMain.setStatusInv(jSONObject.optInt(PstBillMain.fieldNames[PstBillMain.FLD_STATUS_INVOICING], 0));
                boolean checkOidBillMain = PstBillMain.checkOID(oid);
                try {
                    if (checkOidBillMain) {
                        PstBillMain.updateExc(billMain);
                    } else {
                        PstBillMain.insertByOid(billMain);
                    }
                } catch (Exception exc) {
                }
            }
        }
        return oid;
    }
}
