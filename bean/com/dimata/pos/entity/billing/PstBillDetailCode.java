/* Generated by Together */

package com.dimata.pos.entity.billing;

import com.dimata.pos.db.*;
/* package java */ 
/* package qdep */
import java.sql.ResultSet;
import java.util.Vector;

//import com.dimata.qdep.db.*;
/* package cashier */
import com.dimata.qdep.entity.Entity;
import com.dimata.qdep.entity.I_PersintentExc;
import com.dimata.util.lang.I_Language;

public class PstBillDetailCode extends DBHandler implements I_DBInterface, I_DBType, I_PersintentExc, I_Language 
{
    //public static final String TBL_CASH_BILL_DETAIL_CODE = "CASH_BILL_DETAIL_CODE";
    public static final String TBL_CASH_BILL_DETAIL_CODE = "cash_bill_detail_code";
    
    public static final int FLD_CASH_BILL_DETAIL_CODE_ID  = 0 ;
    public static final int FLD_SALE_ITEM_ID    = 1 ;
    public static final int FLD_STOCK_CODE         = 2 ;
    
    public static final String[] fieldNames = 
    {
        "CASH_BILL_DETAIL_CODE_ID",
        "SALE_ITEM_ID",
        "STOCK_CODE"
        
    };

    public static final  int[] fieldTypes = 
    {
        TYPE_LONG + TYPE_PK + TYPE_ID,
        TYPE_LONG + TYPE_FK,
        TYPE_STRING
        
    };

    public static final int UPDATE_STATUS_NONE=0;
    public static final int UPDATE_STATUS_INSERTED=1;
    public static final int UPDATE_STATUS_UPDATED=2;
    public static final int UPDATE_STATUS_DELETED=3; 
     //constructor
    public PstBillDetailCode (){
    }

    public PstBillDetailCode (int i) throws DBException {
        super(new PstBillDetailCode());
    }

    public PstBillDetailCode (String sOid) throws DBException {
        super(new PstBillDetailCode(0));
        if(!locate(sOid))
            throw new DBException(this,DBException.RECORD_NOT_FOUND);
        else
            return;
    }

     public PstBillDetailCode (long lOid) throws DBException {
        super(new PstBillDetailCode(0));
        String sOid="0";
        try {
            sOid = String.valueOf(lOid);
        }catch(Exception e) {
            throw new DBException(this,DBException.RECORD_NOT_FOUND);
        }
        if(!locate(sOid))
            throw new DBException(this,DBException.RECORD_NOT_FOUND); 
		else 
			return; 
	 }

    public int getFieldSize(){
	   return fieldNames.length;
	 }

    public String getTableName(){
	   return TBL_CASH_BILL_DETAIL_CODE;
	}

	public String[] getFieldNames(){ 
		return fieldNames; 
	}

	public int[] getFieldTypes(){ 
		return fieldTypes; 
	}

	public String getPersistentName(){ 
		return new PstBillDetailCode().getClass().getName();
	}

    public long fetchExc(Entity ent) throws Exception{
        BillDetailCode billDetailCode = fetchExc(ent.getOID());
        ent = (Entity)billDetailCode;
        return billDetailCode.getOID();
    }

    public long insertExc(Entity ent) throws Exception{
        return insertExc((BillDetailCode) ent);
    }

    public long updateExc(Entity ent) throws Exception{
        return updateExc((BillDetailCode) ent);
    }

    public long deleteExc(Entity ent) throws Exception{
        if(ent==null){
            throw new DBException(this,DBException.RECORD_NOT_FOUND);
        }
        return deleteExc(ent.getOID());
     }

    public static BillDetailCode fetchExc(long oid) throws DBException
    {
        try
        {
            BillDetailCode billDetailCode = new BillDetailCode();
            PstBillDetailCode pstBillDetail = new PstBillDetailCode(oid);
            billDetailCode.setOID(oid);
            
            billDetailCode.setSaleItemId (pstBillDetail.getlong(FLD_SALE_ITEM_ID));
            billDetailCode.setStockCode (pstBillDetail.getString(FLD_STOCK_CODE));
            
            return billDetailCode;
       	}
        catch(DBException dbe)
        {
            System.out.println("error ="+dbe);
            throw dbe; 
	}
        catch(Exception e)
        {
            System.out.println("error ="+e);
            throw new DBException(new PstBillDetailCode(0),DBException.UNKNOWN);
	} 
    }

    public static long insertExc(BillDetailCode billDetailCode) throws DBException{
        try{
            PstBillDetailCode pstBillDetail = new PstBillDetailCode(0);
            
            pstBillDetail.setLong(FLD_SALE_ITEM_ID,billDetailCode.getSaleItemId ());
            pstBillDetail.setString (FLD_STOCK_CODE,billDetailCode.getStockCode ());
            
            pstBillDetail.insert();
            billDetailCode.setOID(pstBillDetail.getlong(FLD_CASH_BILL_DETAIL_CODE_ID));
        }catch(DBException dbe){
            throw dbe;
        }catch(Exception e){
            throw new DBException(new PstBillDetailCode(0),DBException.UNKNOWN);
        }
        return billDetailCode.getOID();
    }

    public static long insertExcByOid(BillDetailCode billDetailCode) throws DBException{
        try{
            PstBillDetailCode pstBillDetail = new PstBillDetailCode(0);

            pstBillDetail.setLong(FLD_SALE_ITEM_ID,billDetailCode.getSaleItemId ());
            pstBillDetail.setString (FLD_STOCK_CODE,billDetailCode.getStockCode ());

            pstBillDetail.insertByOid(billDetailCode.getOID());
            //billDetailCode.setOID(pstBillDetail.getlong(FLD_CASH_BILL_DETAIL_CODE_ID));
        }catch(DBException dbe){
            throw dbe;
        }catch(Exception e){
            throw new DBException(new PstBillDetailCode(0),DBException.UNKNOWN);
        }
        return billDetailCode.getOID();
    }

    public static long updateExc(BillDetailCode billDetailCode) throws DBException{
     try{
        if(billDetailCode.getOID() != 0){
            PstBillDetailCode pstBillDetail = new PstBillDetailCode(billDetailCode.getOID());
            pstBillDetail.setLong(FLD_SALE_ITEM_ID,billDetailCode.getSaleItemId ());
            pstBillDetail.setString (FLD_STOCK_CODE,billDetailCode.getStockCode ());
            
            pstBillDetail.update();
            return billDetailCode.getOID();
          }
        }catch(DBException dbe){
			throw dbe; 
		}catch(Exception e){ 
			throw new DBException(new PstBillDetailCode(0),DBException.UNKNOWN);
		}
		return 0;
    }

    public static long deleteExc(long oid) throws DBException{
        try{
              PstBillDetailCode pstBillDetail = new PstBillDetailCode(oid);
              pstBillDetail.delete();
        }catch(DBException dbe){
			throw dbe; 
		}catch(Exception e){ 
			throw new DBException(new PstBillDetailCode(0),DBException.UNKNOWN);
		}
		return oid;
	}

    public static Vector listAll(){
		return list(0, 500, "",""); 
	}

	public static Vector list(int limitStart,int recordToGet, String whereClause, String order){
		Vector lists = new Vector(); 
		DBResultSet dbrs = null;
		try {
			String sql = "SELECT * FROM " + TBL_CASH_BILL_DETAIL_CODE;
			if(whereClause != null && whereClause.length() > 0)
				sql = sql + " WHERE " + whereClause;
			if(order != null && order.length() > 0)
				sql = sql + " ORDER BY " + order;

			switch (DBHandler.DBSVR_TYPE) { 
			case DBHandler.DBSVR_MYSQL : 
					if(limitStart == 0 && recordToGet == 0)
						sql = sql + ""; 
					else 
						sql = sql + " LIMIT " + limitStart + ","+ recordToGet ; 
				 break;
			case DBHandler.DBSVR_POSTGRESQL : 
 					if(limitStart == 0 && recordToGet == 0) 
						sql = sql + ""; 
					else 
						sql = sql + " LIMIT " +recordToGet + " OFFSET "+ limitStart ;
				 break;
			case DBHandler.DBSVR_SYBASE :
				 break;
			case DBHandler.DBSVR_ORACLE :
				 break;
			case DBHandler.DBSVR_MSSQL :
				 break;

			default:
                if(limitStart == 0 && recordToGet == 0)
					sql = sql + ""; 
				else 
					sql = sql + " LIMIT " + limitStart + ","+ recordToGet ; 
			}
            dbrs = DBHandler.execQueryResult(sql);
			ResultSet rs = dbrs.getResultSet();
			while(rs.next()) {
				BillDetailCode billDetailCode = new BillDetailCode();
				resultToObject(rs, billDetailCode);
				lists.add(billDetailCode);
			}
			rs.close();
			return lists;

		}catch(Exception e) {
			System.out.println(e);
		}finally {
			DBResultSet.close(dbrs);
		}
			return new Vector();
	}

    public static void resultToObject(ResultSet rs, BillDetailCode billDetailCode)
    {
        try
        {
            
            billDetailCode.setOID(rs.getLong(PstBillDetailCode.fieldNames[PstBillDetailCode.FLD_CASH_BILL_DETAIL_CODE_ID]));
            billDetailCode.setSaleItemId (rs.getLong(PstBillDetailCode.fieldNames[PstBillDetailCode.FLD_SALE_ITEM_ID]));
            billDetailCode.setStockCode (rs.getString(PstBillDetailCode.fieldNames[PstBillDetailCode.FLD_STOCK_CODE]));
            
        }
        catch(Exception e){ }
    }
    
    //Discount Type
    public static int DISC_TYPE_PERCENT = 0;
    public static int DISC_TYPE_VALUE   = 1;

    public static boolean checkOID(long billDetailCodeId)
    {
        DBResultSet dbrs = null;
        boolean result = false;
        try
        {
            String sql = "SELECT * FROM " + TBL_CASH_BILL_DETAIL_CODE + 
                " WHERE " + PstBillDetailCode.fieldNames[PstBillDetailCode.FLD_CASH_BILL_DETAIL_CODE_ID] + 
                " = " + billDetailCodeId;

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();

            while(rs.next()) 
            { 
                result = true; 
            }
            rs.close();
        }
        catch(Exception e)
        {
            System.out.println("err : "+e.toString());
        }
        finally
        {
            DBResultSet.close(dbrs);
        }
        return result;
    }

    
    public static BillDetailCode getBillDetailCode(long lBillDetailOid)
    {
        BillDetailCode objResult = new BillDetailCode(); 
        DBResultSet dbrs = null;
        try 
        {
            String sql = "SELECT * FROM " + TBL_CASH_BILL_DETAIL_CODE + 
                         " WHERE " + PstBillDetailCode.fieldNames[PstBillDetailCode.FLD_SALE_ITEM_ID] +
                         " = " + lBillDetailOid;
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while(rs.next()) 
            {                    
                resultToObject(rs, objResult);
            }                        
        }
        catch(Exception e) 
        {
            System.out.println(e);
        }
        finally 
        {            
            DBResultSet.close(dbrs);
            
        }     
        return objResult;
    }
    
}
