/* Generated by Together */

package com.dimata.pos.entity.billing;

import com.dimata.common.entity.system.PstSystemProperty;
import com.dimata.interfaces.BOCashier.I_BillingDetail;
import com.dimata.pos.db.*;
/* package java */

/* package qdep */
import java.sql.ResultSet;
import java.util.Vector;

//import com.dimata.qdep.db.*;
/* package cashier */
import com.dimata.qdep.entity.Entity;
import com.dimata.qdep.entity.I_PersintentExc;
import com.dimata.util.lang.I_Language;
import com.dimata.services.WebServices;
import java.util.ArrayList;
import org.json.JSONArray;
import org.json.JSONObject;


public class PstBillDetail extends DBHandler implements I_DBInterface, I_DBType, I_PersintentExc, I_Language, I_BillingDetail {
    //public static final String TBL_CASH_BILL_DETAIL = "CASH_BILL_DETAIL";
    public static final String TBL_CASH_BILL_DETAIL = "cash_bill_detail";
    
    public static final int FLD_BILL_DETAIL_ID = 0;
    public static final int FLD_BILL_MAIN_ID = 1;
    public static final int FLD_UNIT_ID = 2;
    public static final int FLD_MATERIAL_ID = 3;
    public static final int FLD_QUANTITY = 4;
    public static final int FLD_ITEM_PRICE = 5;
    public static final int FLD_DISC_TYPE = 6;
    public static final int FLD_DISC = 7;
    public static final int FLD_TOTAL_PRICE = 8;
    public static final int FLD_SKU = 9;
    public static final int FLD_ITEM_NAME = 10;
    public static final int FLD_MATERIAL_TYPE = 11;
    public static final int FLD_COST = 12;
    public static final int FLD_DISC_PCT = 13;
    public static final int FLD_QTY_STOCK = 14;
    public static final int FLD_ITEM_PRICE_STOCK = 15;
    public static final int FLD_DISC_GLOBAL = 16;
    
    public static final String[] fieldNames = {
        "CASH_BILL_DETAIL_ID",
        "CASH_BILL_MAIN_ID",
        "UNIT_ID",
        "MATERIAL_ID",
        "QTY",
        "ITEM_PRICE",
        "DISC_TYPE",
        "DISC",
        "TOTAL_PRICE",
        "SKU",
        "ITEM_NAME",
        "MATERIAL_TYPE",
        "COST", "DISC_PCT",
        "QTY_STOCK", "ITEM_PRICE_STOCK",
        "DISC_GLOBAL"
    };
    
    
    public static final int[] fieldTypes = {
        TYPE_LONG + TYPE_PK + TYPE_ID,
        TYPE_LONG + TYPE_FK,
        TYPE_LONG + TYPE_FK,
        TYPE_LONG + TYPE_FK,
        TYPE_FLOAT,
        TYPE_FLOAT,
        TYPE_INT,
        TYPE_FLOAT,
        TYPE_FLOAT,
        TYPE_STRING,
        TYPE_STRING,
        TYPE_INT,
        TYPE_FLOAT,
        TYPE_FLOAT,
        TYPE_FLOAT,
        TYPE_FLOAT,
        TYPE_FLOAT
    };
    
    public static final int TYPE_DISC_VAL = 1;
    public static final int TYPE_DISC_PCT = 0;
    
    public static final int UPDATE_STATUS_NONE = 0;
    public static final int UPDATE_STATUS_INSERTED = 1;
    public static final int UPDATE_STATUS_UPDATED = 2;
    public static final int UPDATE_STATUS_DELETED = 3;
    
    //constructor
    public PstBillDetail() {
    }
    
    public PstBillDetail(int i) throws DBException {
        super(new PstBillDetail());
    }
    
    public PstBillDetail(String sOid) throws DBException {
        super(new PstBillDetail(0));
        if (!locate(sOid))
            throw new DBException(this, DBException.RECORD_NOT_FOUND);
        else
            return;
    }
    
    public PstBillDetail(long lOid) throws DBException {
        super(new PstBillDetail(0));
        String sOid = "0";
        try {
            sOid = String.valueOf(lOid);
        } catch (Exception e) {
            throw new DBException(this, DBException.RECORD_NOT_FOUND);
        }
        if (!locate(sOid))
            throw new DBException(this, DBException.RECORD_NOT_FOUND);
        else
            return;
    }
    
    public int getFieldSize() {
        return fieldNames.length;
    }
    
    public String getTableName() {
        return TBL_CASH_BILL_DETAIL;
    }
    
    public String[] getFieldNames() {
        return fieldNames;
    }
    
    public int[] getFieldTypes() {
        return fieldTypes;
    }
    
    public String getPersistentName() {
        return new PstBillDetail().getClass().getName();
    }
    
    public long fetchExc(Entity ent) throws Exception {
        Billdetail billdetail = fetchExc(ent.getOID());
        ent = (Entity) billdetail;
        return billdetail.getOID();
    }
    
    public long insertExc(Entity ent) throws Exception {
        return insertExc((Billdetail) ent);
    }
    
    public long updateExc(Entity ent) throws Exception {
        return updateExc((Billdetail) ent);
    }
    
    public long deleteExc(Entity ent) throws Exception {
        if (ent == null) {
            throw new DBException(this, DBException.RECORD_NOT_FOUND);
        }
        return deleteExc(ent.getOID());
    }
    
    public static Billdetail fetchExc(long oid) throws DBException {
        try {
            Billdetail billdetail = new Billdetail();
            PstBillDetail pstBillDetail = new PstBillDetail(oid);
            billdetail.setOID(oid);
            billdetail.setBillMainId(pstBillDetail.getlong(FLD_BILL_MAIN_ID));
            billdetail.setUnitId(pstBillDetail.getlong(FLD_UNIT_ID));
            billdetail.setMaterialId(pstBillDetail.getlong(FLD_MATERIAL_ID));
            billdetail.setItemName(pstBillDetail.getString(FLD_ITEM_NAME));
            billdetail.setItemPrice(pstBillDetail.getdouble(FLD_ITEM_PRICE));
            billdetail.setDiscType(pstBillDetail.getInt(FLD_DISC_TYPE));
            billdetail.setDisc(pstBillDetail.getdouble(FLD_DISC));
            billdetail.setQty(pstBillDetail.getdouble(FLD_QUANTITY));
            billdetail.setTotalPrice(pstBillDetail.getdouble(FLD_TOTAL_PRICE));
            billdetail.setSku(pstBillDetail.getString(FLD_SKU));
            billdetail.setMaterialType(pstBillDetail.getInt(FLD_MATERIAL_TYPE));
            billdetail.setCost(pstBillDetail.getdouble(FLD_COST));
            billdetail.setDiscPct(pstBillDetail.getdouble(FLD_DISC_PCT));
            billdetail.setQtyStock(pstBillDetail.getdouble(FLD_QTY_STOCK));
            billdetail.setItemPriceStock(pstBillDetail.getdouble(FLD_ITEM_PRICE_STOCK));
            billdetail.setDiscGlobal(pstBillDetail.getdouble(FLD_DISC_GLOBAL));
            return billdetail;
        } catch (DBException dbe) {
            System.out.println("error =" + dbe);
            throw dbe;
        } catch (Exception e) {
            System.out.println("error =" + e);
            throw new DBException(new PstBillDetail(0), DBException.UNKNOWN);
        }
    }
    
    public static long insertExc(Billdetail billdetail) throws DBException {
        try {
            PstBillDetail pstBillDetail = new PstBillDetail(0);
            pstBillDetail.setLong(FLD_BILL_MAIN_ID, billdetail.getBillMainId());
            pstBillDetail.setLong(FLD_UNIT_ID, billdetail.getUnitId());
            pstBillDetail.setLong(FLD_MATERIAL_ID, billdetail.getMaterialId());
            pstBillDetail.setString(FLD_ITEM_NAME, billdetail.getItemName());
            pstBillDetail.setDouble(FLD_ITEM_PRICE, billdetail.getItemPrice());
            pstBillDetail.setInt(FLD_DISC_TYPE, billdetail.getDiscType());
            pstBillDetail.setDouble(FLD_DISC, billdetail.getDisc());
            pstBillDetail.setDouble(FLD_QUANTITY, billdetail.getQty());
            pstBillDetail.setDouble(FLD_TOTAL_PRICE, billdetail.getTotalPrice());
            pstBillDetail.setString(FLD_SKU, billdetail.getSku());
            pstBillDetail.setInt(FLD_MATERIAL_TYPE, billdetail.getMaterialType());
            pstBillDetail.setDouble(FLD_COST, billdetail.getCost());
            pstBillDetail.setDouble(FLD_DISC_PCT, billdetail.getDiscPct());
            pstBillDetail.setDouble(FLD_QTY_STOCK, billdetail.getQtyStock());
            pstBillDetail.setDouble(FLD_ITEM_PRICE_STOCK, billdetail.getItemPriceStock());
            pstBillDetail.setDouble(FLD_DISC_GLOBAL, billdetail.getDiscGlobal());
            pstBillDetail.insert();
            billdetail.setOID(pstBillDetail.getlong(FLD_BILL_DETAIL_ID));
        } catch (DBException dbe) {
            throw dbe;
        } catch (Exception e) {
            throw new DBException(new PstBillDetail(0), DBException.UNKNOWN);
        }
        return billdetail.getOID();
    }


    public static long insertExcByOid(Billdetail billdetail) throws DBException {
        try {
            PstBillDetail pstBillDetail = new PstBillDetail(0);
            pstBillDetail.setLong(FLD_BILL_MAIN_ID, billdetail.getBillMainId());
            pstBillDetail.setLong(FLD_UNIT_ID, billdetail.getUnitId());
            pstBillDetail.setLong(FLD_MATERIAL_ID, billdetail.getMaterialId());
            pstBillDetail.setString(FLD_ITEM_NAME, billdetail.getItemName());
            pstBillDetail.setDouble(FLD_ITEM_PRICE, billdetail.getItemPrice());
            pstBillDetail.setInt(FLD_DISC_TYPE, billdetail.getDiscType());
            pstBillDetail.setDouble(FLD_DISC, billdetail.getDisc());
            pstBillDetail.setDouble(FLD_QUANTITY, billdetail.getQty());
            pstBillDetail.setDouble(FLD_TOTAL_PRICE, billdetail.getTotalPrice());
            pstBillDetail.setString(FLD_SKU, billdetail.getSku());
            pstBillDetail.setInt(FLD_MATERIAL_TYPE, billdetail.getMaterialType());
            pstBillDetail.setDouble(FLD_COST, billdetail.getCost());
            pstBillDetail.setDouble(FLD_DISC_PCT, billdetail.getDiscPct());
            pstBillDetail.setDouble(FLD_QTY_STOCK, billdetail.getQtyStock());
            pstBillDetail.setDouble(FLD_ITEM_PRICE_STOCK, billdetail.getItemPriceStock());
            pstBillDetail.setDouble(FLD_DISC_GLOBAL, billdetail.getDiscGlobal());
            pstBillDetail.insertByOid(billdetail.getOID());
             //billdetail.setOID(pstBillDetail.getlong(FLD_BILL_DETAIL_ID));
        } catch (DBException dbe) {
            throw dbe;
        } catch (Exception e) {
            throw new DBException(new PstBillDetail(0), DBException.UNKNOWN);
        }
        return billdetail.getOID();
    }


    public static long updateExc(Billdetail billdetail) throws DBException {
        try {
            if (billdetail.getOID() != 0) {
                PstBillDetail pstBillDetail = new PstBillDetail(billdetail.getOID());
                pstBillDetail.setLong(FLD_BILL_MAIN_ID, billdetail.getBillMainId());
                pstBillDetail.setLong(FLD_UNIT_ID, billdetail.getUnitId());
                pstBillDetail.setLong(FLD_MATERIAL_ID, billdetail.getMaterialId());
                pstBillDetail.setString(FLD_ITEM_NAME, billdetail.getItemName());
                pstBillDetail.setDouble(FLD_ITEM_PRICE, billdetail.getItemPrice());
                pstBillDetail.setInt(FLD_DISC_TYPE, billdetail.getDiscType());
                pstBillDetail.setDouble(FLD_DISC, billdetail.getDisc());
                pstBillDetail.setDouble(FLD_QUANTITY, billdetail.getQty());
                pstBillDetail.setDouble(FLD_TOTAL_PRICE, billdetail.getTotalPrice());
                pstBillDetail.setString(FLD_SKU, billdetail.getSku());
                pstBillDetail.setInt(FLD_MATERIAL_TYPE, billdetail.getMaterialType());
                pstBillDetail.setDouble(FLD_COST, billdetail.getCost());
                pstBillDetail.setDouble(FLD_DISC_PCT, billdetail.getDiscPct());
                pstBillDetail.setDouble(FLD_QTY_STOCK, billdetail.getQtyStock());
                pstBillDetail.setDouble(FLD_ITEM_PRICE_STOCK, billdetail.getItemPriceStock());
                pstBillDetail.setDouble(FLD_DISC_GLOBAL, billdetail.getDiscGlobal());
                pstBillDetail.update();
                return billdetail.getOID();
            }
        } catch (DBException dbe) {
            throw dbe;
        } catch (Exception e) {
            throw new DBException(new PstBillDetail(0), DBException.UNKNOWN);
        }
        return 0;
    }
    
    public static long deleteExc(long oid) throws DBException {
        try {
            PstBillDetail pstBillDetail = new PstBillDetail(oid);
            pstBillDetail.delete();
        } catch (DBException dbe) {
            throw dbe;
        } catch (Exception e) {
            throw new DBException(new PstBillDetail(0), DBException.UNKNOWN);
        }
        return oid;
    }
    
    public static Vector listAll() {
        return list(0, 500, "", "");
    }
    
    public static Vector list(int limitStart, int recordToGet, String whereClause, String order) {
        Vector lists = new Vector();
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT * FROM " + TBL_CASH_BILL_DETAIL;
            if (whereClause != null && whereClause.length() > 0)
                sql = sql + " WHERE " + whereClause;
            if (order != null && order.length() > 0)
                sql = sql + " ORDER BY " + order;
            
            switch (DBHandler.DBSVR_TYPE) {
                case DBHandler.DBSVR_MYSQL:
                    if (limitStart == 0 && recordToGet == 0)
                        sql = sql + "";
                    else
                        sql = sql + " LIMIT " + limitStart + "," + recordToGet;
                    break;
                case DBHandler.DBSVR_POSTGRESQL:
                    if (limitStart == 0 && recordToGet == 0)
                        sql = sql + "";
                    else
                        sql = sql + " LIMIT " + recordToGet + " OFFSET " + limitStart;
                    break;
                case DBHandler.DBSVR_SYBASE:
                    break;
                case DBHandler.DBSVR_ORACLE:
                    break;
                case DBHandler.DBSVR_MSSQL:
                    break;
                    
                default:
                    if (limitStart == 0 && recordToGet == 0)
                        sql = sql + "";
                    else
                        sql = sql + " LIMIT " + limitStart + "," + recordToGet;
            }
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                Billdetail billdetail = new Billdetail();
                resultToObject(rs, billdetail);
                lists.add(billdetail);
            }
            rs.close();
            return lists;
            
        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return new Vector();
    }
    
    public static ArrayList getListFromApiAll() {
        return listFromApi(0, 0, "", "");
    }
    
    public static ArrayList listFromApi(int limitStart, int recordToGet, String whereClause, String order) {
        ArrayList listData = new ArrayList();
        try {
            JSONArray lists = new JSONArray();
            String posApiUrl = PstSystemProperty.getValueByName("POS_API_URL");
            String param = "limitStart=" + WebServices.encodeUrl("" + limitStart) + "&recordToGet=" + WebServices.encodeUrl("" + recordToGet)
                    + "&whereClause=" + WebServices.encodeUrl(whereClause) + "&order=" + WebServices.encodeUrl("");
            JSONObject jo = WebServices.getAPIWithParam("", posApiUrl + "/billdetail-param/list", param);
            try {
                lists = jo.optJSONArray("DATA");
                for(int i = 0; i < lists.length(); i++){
                    JSONObject obj = lists.optJSONObject(i);
                    
                }
            } catch (Exception e) {
                System.out.println(e.toString());
            }
        } catch (Exception e) {
            System.out.println(e.toString());
        }
        return listData;
    }
    
    public static void resultToObject(ResultSet rs, Billdetail billdetail) {
        try {
            billdetail.setOID(rs.getLong(PstBillDetail.fieldNames[PstBillDetail.FLD_BILL_DETAIL_ID]));
            billdetail.setBillMainId(rs.getLong(PstBillDetail.fieldNames[PstBillDetail.FLD_BILL_MAIN_ID]));
            billdetail.setUnitId(rs.getLong(PstBillDetail.fieldNames[PstBillDetail.FLD_UNIT_ID]));
            billdetail.setMaterialId(rs.getLong(PstBillDetail.fieldNames[PstBillDetail.FLD_MATERIAL_ID]));
            billdetail.setItemName(rs.getString(PstBillDetail.fieldNames[PstBillDetail.FLD_ITEM_NAME]));
            billdetail.setItemPrice(rs.getDouble(PstBillDetail.fieldNames[PstBillDetail.FLD_ITEM_PRICE]));
            billdetail.setDiscType(rs.getInt(PstBillDetail.fieldNames[PstBillDetail.FLD_DISC_TYPE]));
            billdetail.setDisc(rs.getDouble(PstBillDetail.fieldNames[PstBillDetail.FLD_DISC]));
            billdetail.setQty(rs.getDouble(PstBillDetail.fieldNames[PstBillDetail.FLD_QUANTITY]));
            billdetail.setTotalPrice(rs.getDouble(PstBillDetail.fieldNames[PstBillDetail.FLD_TOTAL_PRICE]));
            billdetail.setSku(rs.getString(PstBillDetail.fieldNames[PstBillDetail.FLD_SKU]));
            billdetail.setMaterialType(rs.getInt(PstBillDetail.fieldNames[PstBillDetail.FLD_MATERIAL_TYPE]));
            billdetail.setCost(rs.getDouble(PstBillDetail.fieldNames[PstBillDetail.FLD_COST]));
            billdetail.setDiscPct(rs.getDouble(PstBillDetail.fieldNames[PstBillDetail.FLD_DISC_PCT]));
            billdetail.setQtyStock(rs.getDouble(PstBillDetail.fieldNames[PstBillDetail.FLD_QTY_STOCK]));
            billdetail.setItemPriceStock(rs.getDouble(PstBillDetail.fieldNames[PstBillDetail.FLD_ITEM_PRICE_STOCK]));
            billdetail.setDiscGlobal(rs.getDouble(PstBillDetail.fieldNames[PstBillDetail.FLD_DISC_GLOBAL]));
        } catch (Exception e) {
            System.out.println("err>>> : "+e.toString());
        }
    }
    
    //Discount Type
    public static int DISC_TYPE_PERCENT = 0;
    public static int DISC_TYPE_VALUE = 1;
    
    public static boolean checkOID(long billDetailId) {
        DBResultSet dbrs = null;
        boolean result = false;
        try {
            String sql = "SELECT * FROM " + TBL_CASH_BILL_DETAIL +
            " WHERE " + PstBillDetail.fieldNames[PstBillDetail.FLD_BILL_DETAIL_ID] +
            " = " + billDetailId;
            
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            
            while (rs.next()) {
                result = true;
            }
            rs.close();
        } catch (Exception e) {
            System.out.println("err : " + e.toString());
        } finally {
            DBResultSet.close(dbrs);
        }
        return result;
    }
    
    
    public static int getCount(String whereClause) {
        int count = 0;
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT COUNT(" + fieldNames[FLD_BILL_DETAIL_ID] + ") FROM " + TBL_CASH_BILL_DETAIL;
            if (whereClause != null && whereClause.length() > 0)
                sql = sql + " WHERE " + whereClause;
            
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                count = rs.getInt(1);
            }
            rs.close();
            
        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return count;
        
    }
    
    public static double getSumTotalItem(String whereClause) {
        double count = 0;
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT SUM(" + fieldNames[FLD_TOTAL_PRICE] + ") FROM " + TBL_CASH_BILL_DETAIL;
            if (whereClause != null && whereClause.length() > 0)
                sql = sql + " WHERE " + whereClause;
            
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                count = rs.getDouble(1);
            }
            rs.close();
            
        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return count;
        
    }
    
    public static double getSumTotalItemBruto(String whereClause) {
        double count = 0;
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT SUM(" + fieldNames[FLD_ITEM_PRICE] + ") FROM " + TBL_CASH_BILL_DETAIL;
            if (whereClause != null && whereClause.length() > 0)
                sql = sql + " WHERE " + whereClause;
            
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                count = rs.getInt(1);
            }
            rs.close();
            
        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return count;
        
    }
    
    public static double getTotalCOGS(long lBillMainOid) {
        double count = 0;
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT SUM(" + PstBillDetail.fieldNames[PstBillDetail.FLD_COST] +
            "*" + PstBillDetail.fieldNames[PstBillDetail.FLD_QUANTITY] + ")" +
            " FROM " + TBL_CASH_BILL_DETAIL +
            " WHERE " + PstBillDetail.fieldNames[PstBillDetail.FLD_BILL_MAIN_ID] +
            " = " + lBillMainOid;
            
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                count = rs.getInt(1);
            }
            rs.close();
            
        }
        catch (Exception e) {
            System.out.println(e);
        }
        finally {
            DBResultSet.close(dbrs);
        }
        return count;
    }
    

    public static double getReturSales(long oidCashCashier){
        double count = 0;
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT SUM(" + PstBillDetail.fieldNames[PstBillDetail.FLD_TOTAL_PRICE] + ")" +
            " FROM " + TBL_CASH_BILL_DETAIL + " CBD" +
            " INNER JOIN " + PstBillMain.TBL_CASH_BILL_MAIN + " CBM" +
            " ON CBD." + PstBillDetail.fieldNames[PstBillDetail.FLD_BILL_MAIN_ID] +
            " = CBM." + PstBillMain.fieldNames[PstBillMain.FLD_BILL_MAIN_ID] +
            " WHERE CBM." + PstBillMain.fieldNames[PstBillMain.FLD_DOC_TYPE]+ "= 1" +
            " AND CBM." + PstBillMain.fieldNames[PstBillMain.FLD_TRANSACTION_STATUS]+ "!= 2" +
            " AND CBM." + PstBillMain.fieldNames[PstBillMain.FLD_CASH_CASHIER_ID] +
            " = " + oidCashCashier;

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                count = rs.getInt(1);
            }
            rs.close();

        }
        catch (Exception e) {
            System.out.println(e);
        }
        finally {
            DBResultSet.close(dbrs);
        }
        return count;
    }


    public boolean isCatalogUsed(long oid) {
        
        String where = fieldNames[FLD_MATERIAL_ID] + "=" + oid;
        int count = getCount(where);
        
        if (count > 0) {
            return true;
        }
        return false;
        
    }
    
    public static JSONObject fetchJSON(long oid){
        JSONObject object = new JSONObject();
        try {
            Billdetail billdetail = PstBillDetail.fetchExc(oid);
            object.put(PstBillDetail.fieldNames[PstBillDetail.FLD_BILL_DETAIL_ID], billdetail.getOID());
            object.put(PstBillDetail.fieldNames[PstBillDetail.FLD_BILL_MAIN_ID], billdetail.getBillMainId());
            object.put(PstBillDetail.fieldNames[PstBillDetail.FLD_UNIT_ID], billdetail.getUnitId());
            object.put(PstBillDetail.fieldNames[PstBillDetail.FLD_MATERIAL_ID], billdetail.getMaterialId());
            object.put(PstBillDetail.fieldNames[PstBillDetail.FLD_QUANTITY], billdetail.getQty());
            object.put(PstBillDetail.fieldNames[PstBillDetail.FLD_ITEM_PRICE], billdetail.getItemPrice());
            object.put(PstBillDetail.fieldNames[PstBillDetail.FLD_DISC_TYPE], billdetail.getDiscType());
            object.put(PstBillDetail.fieldNames[PstBillDetail.FLD_DISC], billdetail.getDisc());
            object.put(PstBillDetail.fieldNames[PstBillDetail.FLD_TOTAL_PRICE], billdetail.getTotalPrice());
            object.put(PstBillDetail.fieldNames[PstBillDetail.FLD_SKU], billdetail.getSku());
            object.put(PstBillDetail.fieldNames[PstBillDetail.FLD_ITEM_NAME], billdetail.getItemName());
            object.put(PstBillDetail.fieldNames[PstBillDetail.FLD_MATERIAL_TYPE], billdetail.getMaterialType());
            object.put(PstBillDetail.fieldNames[PstBillDetail.FLD_COST], billdetail.getCost());
            object.put(PstBillDetail.fieldNames[PstBillDetail.FLD_DISC_PCT], billdetail.getDiscPct());
            object.put(PstBillDetail.fieldNames[PstBillDetail.FLD_QTY_STOCK], billdetail.getQtyStock());
            object.put(PstBillDetail.fieldNames[PstBillDetail.FLD_ITEM_PRICE_STOCK], billdetail.getItemPriceStock());
            object.put(PstBillDetail.fieldNames[PstBillDetail.FLD_DISC_GLOBAL], billdetail.getDiscGlobal());
        } catch (Exception exc) {
        }
        return object;
    }
    
    public static void jsonToObject(JSONObject jo, Billdetail billdetail){
        try {
            billdetail.setOID(jo.optLong(PstBillDetail.fieldNames[PstBillDetail.FLD_BILL_DETAIL_ID]));
            billdetail.setBillMainId(jo.optLong(PstBillDetail.fieldNames[PstBillDetail.FLD_BILL_MAIN_ID]));
            billdetail.setUnitId(jo.optLong(PstBillDetail.fieldNames[PstBillDetail.FLD_UNIT_ID]));
            billdetail.setMaterialId(jo.optLong(PstBillDetail.fieldNames[PstBillDetail.FLD_MATERIAL_ID]));
            billdetail.setItemName(jo.optString(PstBillDetail.fieldNames[PstBillDetail.FLD_ITEM_NAME]));
            billdetail.setItemPrice(jo.optDouble(PstBillDetail.fieldNames[PstBillDetail.FLD_ITEM_PRICE]));
            billdetail.setQty(jo.optDouble(PstBillDetail.fieldNames[PstBillDetail.FLD_QUANTITY]));
            billdetail.setTotalPrice(jo.optDouble(PstBillDetail.fieldNames[PstBillDetail.FLD_TOTAL_PRICE]));
            billdetail.setSku(jo.optString(PstBillDetail.fieldNames[PstBillDetail.FLD_SKU]));
            billdetail.setCost(jo.optDouble(PstBillDetail.fieldNames[PstBillDetail.FLD_COST]));
        } catch (Exception e) {
            System.out.println(e.toString());
        }
    }
    
}
