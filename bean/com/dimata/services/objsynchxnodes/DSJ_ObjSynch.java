/* Generated by Together */

package com.dimata.services.objsynchxnodes;
import com.dimata.instant.util.*;
import com.dimata.instant.general.*;
import java.util.*;
import com.dimata.services.db.*;
import com.dimata.qdep.entity.*;
import com.dimata.*;
import com.dimata.util.*;
import java.io.*;
import javax.servlet.*;
import javax.servlet.http.*;
import com.dimata.services.*;
import java.sql.*;

import com.dimata.services.db.*;
import com.dimata.services.objsynchxnodes.SignedEntity;
import com.dimata.services.objsynchxnodes.ObjSynchNode;

/**
 * play as utility for application and sunchronization modules
 **/
public class DSJ_ObjSynch {
    public final static int OBJ_STATUS_NEW            =0; // object new inserted
    public final static int OBJ_STATUS_GOT_WAIT_RSLT  =1; // object got by getter in wait for result
    public final static int OBJ_STATUS_FAILED         =2; // object could not synchronized
    public final static int OBJ_STATUS_GEN_FETCH_FAILED   =3; // object could not be fetched
    public final static int OBJ_STATUS_GEN_FETCH_EXCEPTION   =4; // exception during fetching
    
    /**
     * Add object into "Object to be synchronized list"
     */
    public synchronized static int addObjToSynch(long oid, String className, int command) {
            return addObjToSynch(oid, 0, className, command);
     }

    /**
     * Add object into "Object to be synchronized list"
     */
    public synchronized static int addObjToSynch(long oid, long oid1, String className, int command) {
        /*
        String targetNode = DSJ_SvcParam.getOneParam(ObjSynchNode.SVC_NAME,
                ObjSynchNode.paramName[ObjSynchNode.REMOTE_PARAM][ObjSynchNode.IDX_OtherNodesNames]);

        // edited by wardana
        boolean bEqualData = false;
        bEqualData = isEqualsData(className);
        if(bEqualData){

            String sql="INSERT INTO OBJ_SYNCH (OBJECT_ID, OBJECT_ID1, CLASS_NAME, STATUS_SYNCH,"+
                "COMMAND, TARGET_NODE) VALUES ("+oid+","+oid1+",'"+className+"',"+ OBJ_STATUS_NEW+","+command+
                 ",'"+ targetNode+ "')";
            System.out.println(" >>> addObjToSynch : "+oid+" - "+oid1+"-" +className+" - " + command+
            "\n"+sql);
            //if(DBHandler.insertByQuery(sql)!=0)
            try {
                if(DBHandler.execUpdate(sql)!=0)
                    return DSJ_ClassMsg.ERR_PROCESS_FAIL;
                else
                    return DSJ_ClassMsg.OK;
            }
            catch (DBException dbe) {
                return DSJ_ClassMsg.ERR_PROCESS_FAIL;
            }
        }
         */
        return 0;
    }

    /**
     * added by wardana
     * 01-05-2004
     * this method for filter data before add to OBJ_SYNCH
     * @param stClassName
     * @return true/false
     */
    public static boolean isEqualsData(String stClassName){
        boolean bResult = false;
        String stPackageFilters = DSJ_SvcParam.getOneParam(ObjSynchNode.SVC_NAME,
                ObjSynchNode.paramName[ObjSynchNode.REMOTE_PARAM][ObjSynchNode.IDX_LastFileNamesGet]);
        int idx = stClassName.lastIndexOf(".");
        String stPackageData = stClassName.substring(0, idx).trim();
        if(stPackageFilters != null && stPackageFilters.trim().length() > 0){
            StringTokenizer objTokenizer = new StringTokenizer(stPackageFilters, ";");
            Vector vFilterParam = new Vector();
            while(objTokenizer.hasMoreTokens()){
                vFilterParam.add(objTokenizer.nextToken());
            }
            String stPackageFilter = "";
            if(vFilterParam != null && vFilterParam.size() > 0){
                for(int i=0; i<vFilterParam.size(); i++){
                    stPackageFilter = ((String)vFilterParam.get(i)).trim();
                    if(stPackageFilter.equals(stPackageData)){
                        bResult = true;
                        break;
                    }
                }
            }
        }
        else{
            bResult = true;
        }
        return bResult;
    }

    public static String composeTargetNode(Vector targetNode ){
        String tgtNodeStr = "";
        if((targetNode!=null) && (targetNode.size()>0)){
            for(int i=0;i<targetNode.size();i++){
                tgtNodeStr=""+tgtNodeStr +";"+(String)targetNode.get(i) ; 
            }
            tgtNodeStr = tgtNodeStr.substring(1);
        }
        return tgtNodeStr;
    }
    
    public static Vector parseTargetNode(String nodes){
        Vector otherNodesNames = new Vector();
        // parse string to vector with separator character ";"
        StringTokenizer st = new StringTokenizer(nodes,";");
        int iTemp=0; 
        while (st.hasMoreTokens()) {
            String strTemp1 = st.nextToken();
            otherNodesNames.add(strTemp1);
            iTemp++;
        }
        
        return otherNodesNames;        
    }
    
    /**
     * Add object into "Object to be synchronized list" with target node paramater in Vector
     */
    public synchronized static int addObjToSynch(long oid, String className, int command,            
        Vector targetNode ) {
            //return addObjToSynch( oid, 0, className, command, targetNode ) ;            
            return 0;
    }

    public synchronized static int addObjToSynch(long oid, long oid1, String className, int command,
        Vector targetNode ) {
        /*
        String tgtNodeStr = composeTargetNode(targetNode );
            
        String sql="";
        
        if(tgtNodeStr.length()<1)
            sql="INSERT INTO OBJ_SYNCH (OBJECT_ID, OBJECT_ID1, CLASS_NAME, STATUS_SYNCH,"+
                "COMMAND) VALUES ("+oid+","+oid1+",'"+className+"',"+ OBJ_STATUS_NEW+","+command+")";
        else
            sql="INSERT INTO OBJ_SYNCH (OBJECT_ID, OBJECT_ID1, CLASS_NAME, STATUS_SYNCH,"+
                "COMMAND, TARGET_NODE) VALUES ("+
                oid+","+oid1+",'"+className+"',"+ OBJ_STATUS_NEW+","+command+","+tgtNodeStr+")";
        
        System.out.println(" >>> addObjToSynch : "+oid+" - "+oid1+" - " +className+" - " + command + "\n" +
           sql);
        //if(DBHandler.insertByQuery(sql)!=0)
        try {
            if(DBHandler.execUpdate(sql)!=0)
                return DSJ_ClassMsg.ERR_PROCESS_FAIL;
            else
                return DSJ_ClassMsg.OK;
        }
        catch (DBException dbe) {
            return DSJ_ClassMsg.ERR_PROCESS_FAIL;
        }*/
        return 0;
    }
    
    /**
     * Update object from "Object to be synchronized list"
     */
    public static int updateStatus(long seqIdx, int newStatus) {
        String sql="UPDATE OBJ_SYNCH SET STATUS_SYNCH="+newStatus +
        "  WHERE SEQ_IDX="+seqIdx ;
        //System.out.println("updateStatus "+sql);
        try {
            if(DBHandler.execUpdate(sql)==0)
                return DSJ_ClassMsg.ERR_PROCESS_FAIL;
            else
                return DSJ_ClassMsg.OK;
        }
        catch (DBException dbe) {
            return DSJ_ClassMsg.ERR_PROCESS_FAIL;
        }
        //return 0;
    }
    
   /**
     * Update object from "Object to be synchronized list"
     */
    public static int updateStatus(long seqIdx, int newStatus, String message) {
        String sql="UPDATE OBJ_SYNCH SET STATUS_SYNCH="+newStatus + " , MESSAGE = " + message +
        "  WHERE SEQ_IDX="+seqIdx ;
        //System.out.println("updateStatus "+sql);
        try {
            if(DBHandler.execUpdate(sql)==0)
                return DSJ_ClassMsg.ERR_PROCESS_FAIL;
            else
                return DSJ_ClassMsg.OK;
        }
        catch (DBException dbe) {
            return DSJ_ClassMsg.ERR_PROCESS_FAIL;
        }
        //return 0;
    }    
    
    /**
     * delete object registry from "Object to be synchronized list"
     */
    public static int delete(long seqIdx) {
        String sql="DELETE FROM OBJ_SYNCH WHERE SEQ_IDX="+seqIdx ;
        //System.out.println("updateStatus "+sql);
        try {
            if(DBHandler.execUpdate(sql)!=0)
                return DSJ_ClassMsg.ERR_PROCESS_FAIL;
            else
                return DSJ_ClassMsg.OK;
        }
        catch (DBException dbe) {
            return DSJ_ClassMsg.ERR_PROCESS_FAIL;
        }
    }
    
    
    /**
     * Get next object to be synchronized
     * return vector cantains (0)generic, (1)Integer(command), (2) Index, 
        (3) Target Nodes (Vector)
     */
  synchronized public static Vector getNextObjToSynch() {

        String sql="SELECT SEQ_IDX, OBJECT_ID, OBJECT_ID1, CLASS_NAME, "+
        "COMMAND, TARGET_NODE FROM OBJ_SYNCH WHERE STATUS_SYNCH="+
        OBJ_STATUS_NEW;

        switch (DBHandler.DBSVR_TYPE){  // get only one column
        case DBHandler.DBSVR_MYSQL:  sql=sql+ " ORDER BY SEQ_IDX LIMIT 1"; break;
        case DBHandler.DBSVR_POSTGRESQL:  sql=sql+ " ORDER BY SEQ_IDX LIMIT 1 OFFSET 0"; break;
        default :
            sql=sql+ " ORDER BY SEQ_IDX LIMIT 1";
        }


        
        DBResultSet dbrs;
        try {
            dbrs = DBHandler.execQueryResult(sql);
        }
        catch (DBException dbe) {
            System.out.println("EXC : getNextObjToSynch " + dbe );
            return null;
        }
        
        //Vector row = (Vector) rslt.get(0);
        Vector row = new Vector();
        try {
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                row.add(new Long(rs.getLong("SEQ_IDX")));
                row.add(new Long(rs.getLong("OBJECT_ID")));
                row.add(new String(rs.getString("CLASS_NAME")));
                row.add(new Integer(rs.getInt("COMMAND")));
                row.add(new String(rs.getString("TARGET_NODE")));
                row.add(new Long(rs.getLong("OBJECT_ID1")));
            }
        }
        catch (SQLException sqle) {
        }
        
        DBResultSet.close(dbrs);
        
        if (row.size() < 1) 
            return null;
        
        long seqIdx = 0;
        long oid = 0;
        long oid1=0;
        String  clsName  = "";
        int  cmd    = 0;
        Vector nodes = null;
        
        Entity gen =  null;
        //Member gen =  null;
        //Member m =  null;
        
        try{
            seqIdx = ((Long)row.get(0)).longValue();
            oid = ((Long)row.get(1)).longValue();
            clsName = (String)row.get(2);
            cmd    = ((Integer)row.get(3)).intValue();
            nodes  = parseTargetNode((String)row.get(4));
            oid1 = ((Long)row.get(5)).longValue();

            gen =  (Entity) Class.forName(clsName).newInstance();
            //gen =  (Member) Class.forName(clsName).newInstance();
            gen.setOID(oid);
            if(oid1!=0){
                gen.setOID(0, oid);
                gen.setOID(1, oid1);
            }
            
            if(cmd!=Command.DELETE){
                I_PersintentExc i_pstExc = (I_PersintentExc) Class.forName(gen.getPstClassName()).newInstance();
                
                if(i_pstExc.fetchExc(gen)!=0){                    
                    Vector vct = new Vector(1,1);
                    //vct.add(m);
                    vct.add(gen);
                    vct.add(new Integer(cmd));
                    vct.add(new Long(seqIdx));
                    vct.add(nodes);
                    if(updateStatus(seqIdx, DSJ_ObjSynch.OBJ_STATUS_GOT_WAIT_RSLT)!=DSJ_ClassMsg.OK)  {
                        System.out.println("UpdateStatus - Error @seqIdx="+seqIdx);
                        return null;
                    }
                    return vct;
                }
                else {
                    updateStatus(seqIdx, OBJ_STATUS_GEN_FETCH_FAILED, " FetchExc Failed ");
                    return null;
                }
            } else{
                Vector vct = new Vector(1,1);
                vct.add(gen);
                vct.add(new Integer(cmd));
                vct.add(new Long(seqIdx));
                vct.add(nodes);
                if(updateStatus(seqIdx, DSJ_ObjSynch.OBJ_STATUS_GOT_WAIT_RSLT)!=DSJ_ClassMsg.OK)  {
                    System.out.println("UpdateStatus - Error @seqIdx="+seqIdx);
                    return null;
                }
                return vct;
                
            }
        }
        catch (Exception exc){
            updateStatus(seqIdx, OBJ_STATUS_GEN_FETCH_EXCEPTION, exc.toString());
            System.out.println("exc OBJ_STATUS_GEN_FETCH_EXCEPTION : " + exc);
            return null;
        }
    }
    
    /**
     * serialize Object into targetURL.
     * the target directory has to be existing , the data with the same name will be overidden
     **/
    public static int serializeObj( Object obj, String targetURL){
        ObjectOutputStream objOut =null;
        try{
            objOut = new ObjectOutputStream(
                new BufferedOutputStream(
                new FileOutputStream(targetURL)));
            objOut.writeObject(obj);
            return DSJ_ClassMsg.OK;
        } catch (Exception exc){
            return DSJ_ClassMsg.ERR_PROCESS_FAIL;
        } finally{
            if(objOut!=null)
                try{
                    objOut.close();
                }catch(Exception exc){
                }
        }
    }

    /**
     * save file String into targetURL.
     * the target directory has to be existing , the data with the same name will be overidden
     **/
    public static int saveFileText( String txt, String targetURL){        
        BufferedOutputStream objOut =null;
        try{
            objOut = 
                new BufferedOutputStream(
                new FileOutputStream(targetURL));
            objOut.write(txt.getBytes());
            return DSJ_ClassMsg.OK;
        } catch (Exception exc){
            return DSJ_ClassMsg.ERR_PROCESS_FAIL;
        } finally{
            if(objOut!=null)
                try{
                    objOut.close();
                }catch(Exception exc){
                }
        }        
    }
    
    /**
     * deserialize SignedEntity from targetURL.
     * the file has to be existing
     **/
    public static SignedEntity deserializeObj(String targetURL){
        try{
            ObjectInputStream objIn = new ObjectInputStream( new BufferedInputStream(
            new FileInputStream(targetURL)));
            SignedEntity signGen = (SignedEntity) objIn.readObject();
            return signGen;
        } catch (Exception exc){
            return null;
        }
    }
    
    /**
     * save params of ObjSynchNode from HttpServletRequest
     */
    public static int httpSaveParamObjSynchNode(String serviceName , HttpServletRequest request){
        try{
            //String serviceName = (String)request.getParameter(ObjSynchNode.SVC_NAME);
            
            Hashtable params = new Hashtable();
            System.out.println("httpSaveParamObjSynchNode"); 
            for(int t=ObjSynchNode.LOCAL_PARAM; t<=ObjSynchNode.TIMER_SETUP;t++){
                String grp[] = ObjSynchNode.paramName[t];
                for(int p=0;p<grp.length;p++){
                    String value = (String) request.getParameter(grp[p]);
                    params.put(grp[p], value==null ? "0":value);
                    System.out.println(ObjSynchNode.paramName[t][p]+" = "+value);
                }
            }
            
            return DSJ_SvcParam.saveParam(serviceName, params);
            
        } catch (Exception exc){
            System.out.println("Exc "+ exc);
            return DSJ_ClassMsg.ERR_PROCESS_FAIL;
        }
    }
    
    /**
     * set parameter of Object Synchronization Nodes
     **/
    public static void setObjSynchNode(ObjSynchNode objSch, Hashtable htbl){
        if( (objSch==null) || (htbl==null))
            return;
        
        // LOCAL PARAM
        try{
            objSch.LocalHostNameFile= (String)htbl.get(ObjSynchNode.paramName[ObjSynchNode.LOCAL_PARAM][ObjSynchNode.IDX_LocalHostNameFile]);
            objSch.LocalOutDirURL= (String)htbl.get(ObjSynchNode.paramName[ObjSynchNode.LOCAL_PARAM][ObjSynchNode.IDX_LocalOutDirURL]);
            objSch.LocalInDirURL= (String)htbl.get(ObjSynchNode.paramName[ObjSynchNode.LOCAL_PARAM][ObjSynchNode.IDX_LocalInDirURL]);
            objSch.LocalObjectSubFolder= (String)htbl.get(ObjSynchNode.paramName[ObjSynchNode.LOCAL_PARAM][ObjSynchNode.IDX_LocalObjectSubFolder]);
            objSch.LocalStatusSubFolder= (String)htbl.get(ObjSynchNode.paramName[ObjSynchNode.LOCAL_PARAM][ObjSynchNode.IDX_LocalStatusSubFolder]);
            objSch.LocalScheFlagFolder= (String)htbl.get(ObjSynchNode.paramName[ObjSynchNode.LOCAL_PARAM][ObjSynchNode.IDX_LocalScheFlagFolder]);
            objSch.SchFlagLocal= (String)htbl.get(ObjSynchNode.paramName[ObjSynchNode.LOCAL_PARAM][ObjSynchNode.IDX_SchFlagLocal]);
            objSch.setLocalNodeName( (String)htbl.get(ObjSynchNode.paramName[ObjSynchNode.LOCAL_PARAM][ObjSynchNode.IDX_LocalNodeName]));

        } catch(Exception exc){
            System.out.println("Exc LOCAL PARAM"+exc);
        }
        
        // SERVICE THREAD SLEEP TIME (in milli seconds)
        try{
            String tmpStr = (String)htbl.get(ObjSynchNode.paramName[ObjSynchNode.SERVICE_THREAD_SLEEP][ObjSynchNode.IDX_threadSleepScheduler]);
            objSch.threadSleepScheduler= Integer.parseInt(tmpStr==null ? "4000":tmpStr);
            tmpStr = (String)htbl.get(ObjSynchNode.paramName[ObjSynchNode.SERVICE_THREAD_SLEEP][ObjSynchNode.IDX_threadSleepSerializer]);
            objSch.threadSleepSerializer= Integer.parseInt(tmpStr==null ? "2000":tmpStr);
            tmpStr = (String)htbl.get(ObjSynchNode.paramName[ObjSynchNode.SERVICE_THREAD_SLEEP][ObjSynchNode.IDX_threadSleepDeserializer]);
            objSch.threadSleepDeserializer= Integer.parseInt(tmpStr==null ? "2000":tmpStr);
            tmpStr = (String)htbl.get(ObjSynchNode.paramName[ObjSynchNode.SERVICE_THREAD_SLEEP][ObjSynchNode.IDX_threadSleepStatusInProcessor]);
            objSch.threadSleepStatusInProcessor= Integer.parseInt(tmpStr==null ? "2000":tmpStr);
        } catch(Exception exc){
            System.out.println("Exc SERVICE THREAD SLEEP TIME "+exc);
        }
        
        //REMOTE PARAMETER 
        try{
            objSch.RemoteHostNameFile= (String)htbl.get(ObjSynchNode.paramName[ObjSynchNode.REMOTE_PARAM][ObjSynchNode.IDX_RemoteHostNameFile]);
            objSch.RemoteOutDirURL= (String)htbl.get(ObjSynchNode.paramName[ObjSynchNode.REMOTE_PARAM][ObjSynchNode.IDX_RemoteOutDirURL]);
            objSch.RemoteInDirURL= (String)htbl.get(ObjSynchNode.paramName[ObjSynchNode.REMOTE_PARAM][ObjSynchNode.IDX_RemoteInDirURL]);
            objSch.RemoteObjectSubFolder= (String)htbl.get(ObjSynchNode.paramName[ObjSynchNode.REMOTE_PARAM][ObjSynchNode.IDX_RemoteObjectSubFolder]);
            objSch.RemoteStatusSubFolder= (String)htbl.get(ObjSynchNode.paramName[ObjSynchNode.REMOTE_PARAM][ObjSynchNode.IDX_RemoteStatusSubFolder]);
            objSch.RemoteScheFlagFolder= (String)htbl.get(ObjSynchNode.paramName[ObjSynchNode.REMOTE_PARAM][ObjSynchNode.IDX_RemoteScheFlagFolder]);
            objSch.SchFlagRemote= (String)htbl.get(ObjSynchNode.paramName[ObjSynchNode.REMOTE_PARAM][ObjSynchNode.IDX_SchFlagRemote]);
            objSch.setOtherNodesNames((String)htbl.get(ObjSynchNode.paramName[ObjSynchNode.REMOTE_PARAM][ObjSynchNode.IDX_OtherNodesNames]));
            objSch.setLastFileNamesGet((String)htbl.get(ObjSynchNode.paramName[ObjSynchNode.REMOTE_PARAM][ObjSynchNode.IDX_LastFileNamesGet]));
        } catch(Exception exc){
            System.out.println("Exc REMOTE PARAMETER "+exc);
        }
        
        //REMOTE FTP 
        try{
            objSch.RemoteHost= (String)htbl.get(ObjSynchNode.paramName[ObjSynchNode.REMOTE_FTP][ObjSynchNode.IDX_RemoteHost]);
            String tmpStr = (String)htbl.get(ObjSynchNode.paramName[ObjSynchNode.REMOTE_FTP][ObjSynchNode.IDX_RemotePort]);
            objSch.RemotePort= Integer.parseInt(tmpStr==null ? "21":tmpStr);;
            objSch.RemoteUser= (String)htbl.get(ObjSynchNode.paramName[ObjSynchNode.REMOTE_FTP][ObjSynchNode.IDX_RemoteUser]);
            objSch.RemotePassword= (String)htbl.get(ObjSynchNode.paramName[ObjSynchNode.REMOTE_FTP][ObjSynchNode.IDX_RemotePassword]);
            objSch.RemotePathDelim= (String)htbl.get(ObjSynchNode.paramName[ObjSynchNode.REMOTE_FTP][ObjSynchNode.IDX_RemotePathDelim]);
            objSch.FTPMode= (String)htbl.get(ObjSynchNode.paramName[ObjSynchNode.REMOTE_FTP][ObjSynchNode.IDX_FTPMode]);
            objSch.FTPConnMode= (String)htbl.get(ObjSynchNode.paramName[ObjSynchNode.REMOTE_FTP][ObjSynchNode.IDX_FTPConnMode]);
        } catch(Exception exc){
            System.out.println("Exc REMOTE FTP "+exc);
        }
        //MASTER TIMER SETUP 
        try{
            String tmpStr =(String)htbl.get(ObjSynchNode.paramName[ObjSynchNode.TIMER_SETUP][ObjSynchNode.IDX_transferPeriodeMinutes]);
            objSch.transferPeriodeMinutes= Integer.parseInt(tmpStr==null ? "15":tmpStr);
            tmpStr = (String)htbl.get(ObjSynchNode.paramName[ObjSynchNode.TIMER_SETUP][ObjSynchNode.IDX_timeOutRemoteReady]);
            objSch.timeOutRemoteReady= Integer.parseInt(tmpStr==null ? "5":tmpStr);
        } catch(Exception exc){
            System.out.println("Exc MASTER TIMER SETUP "+exc);
        }
        
    }
    
    public static String maxLong000 = "0000000000000000000000000";
    /**
     * create string with maximum long of Long number, e.g. for creating file name
     */
    public static String createStringLong000(long ln){
         String strln = ""+ Math.abs(ln);
         
         String rtr = maxLong000.substring(0, maxLong000.length()- strln.length())+strln;
         return rtr;
    }

    /**
    * create path specified
    */
    public static boolean createPath(String path){
        boolean created = false;

        try{
            created = true;
        } catch (Exception exc){
            ;
        }

        return created;

    }

    /**
     * copy file from SourcePath into targetPath.
     * the target directory has to be existing , the data with the same name will be overidden
     **/
    public static int copyFile( String sourcePath, String targetPath){
        FileInputStream fileIn =null;
        FileOutputStream fileOut =null;

        try{
            fileIn = new FileInputStream(sourcePath);
            fileOut = new FileOutputStream(targetPath);
            fileOut.write(fileIn.read());
            return DSJ_ClassMsg.OK;
        } catch (Exception exc){
            return DSJ_ClassMsg.ERR_PROCESS_FAIL;
        } finally{
            if(fileOut!=null)
                try{
                    fileOut.close();
                }catch(Exception exc){
                }
            if(fileIn!=null)
                try{
                    fileIn.close();
                }catch(Exception exc){
                }
        }
    }

}

