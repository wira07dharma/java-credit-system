/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.dimata.sedana.ajax.masterdata;

import com.dimata.aiso.session.admin.SessUserSession;
import com.dimata.common.entity.system.PstSystemProperty;
import com.dimata.pos.entity.billing.PstBillMain;
import com.dimata.qdep.form.FRMQueryString;
import com.dimata.sedana.common.I_Sedana;
import com.dimata.sedana.entity.masterdata.JangkaWaktu;
import com.dimata.sedana.entity.masterdata.JangkaWaktuFormula;
import com.dimata.sedana.entity.masterdata.PstJangkaWaktu;
import com.dimata.sedana.entity.masterdata.PstJangkaWaktuFormula;
import com.dimata.sedana.form.masterdata.CtrlJangkaWaktu;
import com.dimata.sedana.form.masterdata.CtrlJangkaWaktuFormula;
import com.dimata.sedana.form.masterdata.FrmJangkaWaktuFormula;
import com.dimata.util.Command;
import com.dimata.util.Formater;
import java.io.IOException;
import java.io.PrintWriter;
import java.text.NumberFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Locale;
import java.util.Vector;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

/**
 *
 * @author arise
 */
public class AjaxJangkaWaktu extends HttpServlet {
//DATATABLES

	private String searchTerm;
	private String colName;
	private int colOrder;
	private String dir;
	private int start;
	private int amount;

	//OBJECT
	private JSONObject jSONObject = new JSONObject();

	//LONG
	private long oid = 0;

	//STRING
	private String dataFor = "";
	private String approot = "";
	private String htmlReturn = "";
	private String message = "";
	private String history = "";
	private String statusDoc = "";
	private String posApiUrl = "";
	private String hrApiUrl = "";

	//BOOLEAN
	private boolean privAdd = false;
	private boolean privUpdate = false;
	private boolean privDelete = false;
	private boolean privView = false;
	private boolean sessLogin = false;

	//INT
	private int iCommand = 0;
	private int iErrCode = 0;
	private int sessLanguage = 0;
	private int tipeTransaksi = -1;

	private long userId = 0;
	private String userName = "";


	private String masterFormulaForm[][] = {
		{"Jangka Waktu", "Tipe Transaksi", "Formula", "Catatan"},
		{"Time Period", "Transaction Type", "Formula", "Note"}
	};

	public static NumberFormat formatNumber = NumberFormat.getInstance(new Locale("id", "ID"));

	/**
	 * Processes requests for both HTTP <code>GET</code> and <code>POST</code> methods.
	 *
	 * @param request servlet request
	 * @param response servlet response
	 * @throws ServletException if a servlet-specific error occurs
	 * @throws IOException if an I/O error occurs
	 */
	protected void processRequest(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		response.setContentType("text/html;charset=UTF-8");
		// OBJECT
		this.jSONObject = new JSONObject();

		//LONG
		this.oid = FRMQueryString.requestLong(request, "MASTER_OID");

		//STRING
		this.dataFor = FRMQueryString.requestString(request, "FRM_FIELD_DATA_FOR");
		this.approot = FRMQueryString.requestString(request, "FRM_FIELD_APPROOT");
		this.htmlReturn = "";
		this.message = "";
		this.history = "";
		this.statusDoc = FRMQueryString.requestString(request, "SEND_STATUS_DOC");
		this.posApiUrl = PstSystemProperty.getValueByName("POS_API_URL");
		this.hrApiUrl = PstSystemProperty.getValueByName("HARISMA_URL");

		//BOOLEAN
		this.privAdd = FRMQueryString.requestBoolean(request, "privadd");
		this.privUpdate = FRMQueryString.requestBoolean(request, "privupdate");
		this.privDelete = FRMQueryString.requestBoolean(request, "privdelete");
		this.privView = FRMQueryString.requestBoolean(request, "privview");
		this.sessLogin = false;

		//INT
		this.iCommand = FRMQueryString.requestCommand(request);
		this.iErrCode = 0;
		this.sessLanguage = FRMQueryString.requestInt(request, "SESS_LANGUAGE");
		this.tipeTransaksi = FRMQueryString.requestInt(request, "FRM_FIELD_TIPE_TRANS");

		//OBJECT
		this.jSONObject = new JSONObject();

		this.userId = FRMQueryString.requestLong(request, "SEND_USER_ID");
		this.userName = FRMQueryString.requestString(request, "SEND_USER_NAME");
		
		//CHECK USER LOGIN SESSION
		HttpSession session = request.getSession();
		SessUserSession userSession = (SessUserSession) session.getValue(SessUserSession.HTTP_SESSION_NAME);
		if (userSession != null) {
			if (userSession.isLoggedIn()) {
				this.sessLogin = true;
			}
		}

		if (this.sessLogin == true) {
			switch (this.iCommand) {
				case Command.SAVE:
					commandSave(request, response);
					break;

				case Command.DELETE:
                    commandDelete(request, response);
					break;

				case Command.LIST:
					commandList(request, response);
					break;

				default: 
					commandNone(request, response);
					break;
			}
		} else {
			this.iErrCode = 1;
			this.message = "Sesi login Anda telah berakhir. Silakan login ulang untuk melanjutkan.";
		}

		try {

			this.jSONObject.put("FRM_FIELD_HTML", this.htmlReturn);
			this.jSONObject.put("RETURN_SESSION_LOGIN", this.sessLogin);
			this.jSONObject.put("RETURN_ERROR_CODE", "" + this.iErrCode);
			this.jSONObject.put("RETURN_MESSAGE", "" + this.message);

		} catch (JSONException jSONException) {
			jSONException.printStackTrace();
		}

		response.getWriter().print(this.jSONObject);
	}
	
	//COMMAND LIST==============================================================
	public void commandList(HttpServletRequest request, HttpServletResponse response) {
		if (this.dataFor.equals("listMasterFormula")) {
			String[] cols = {
				"",
				"JW." + PstJangkaWaktu.fieldNames[PstJangkaWaktu.FLD_JANGKA_WAKTU],
				"JWF." + PstJangkaWaktuFormula.fieldNames[PstJangkaWaktuFormula.FLD_TRANSACTION_TYPE],
				"JWF." + PstJangkaWaktuFormula.fieldNames[PstJangkaWaktuFormula.FLD_FORMULA],
				""
			};
			jSONObject = listDataTables(request, response, cols, this.dataFor, this.jSONObject);
		} 
	}

	//COMMAND NONE==============================================================
	public void commandNone(HttpServletRequest request, HttpServletResponse response) {
		if (this.dataFor.equals("showMasterFormulaForm")) {
			showMasterFormulaForm(request, response);
		} 
	}

	// COMMAND SAVE ============================================================================
	public void commandSave(HttpServletRequest request, HttpServletResponse response) {
		if (this.dataFor.equals("saveMasterFormula")) {
			saveMasterFormula(request, response);
		} 
	}
	// COMMAND DELETE ============================================================================
	public void commandDelete(HttpServletRequest request, HttpServletResponse response) {
		if (this.dataFor.equals("deleteMasterFormula")) {
			deleteMasterFormula(request, response);
		}  
	}
	
	// COMMAND SAVE
	public void saveMasterFormula(HttpServletRequest request, HttpServletResponse res){
		CtrlJangkaWaktuFormula cjwf = new CtrlJangkaWaktuFormula(request);
		this.iErrCode = cjwf.action(this.iCommand, oid, userId, userName);
//		this.iErrCode = -1;
		long oid = cjwf.getOidRes();
		if (oid != 0) {
			this.message = "Simpan Berhasil.";
			this.iErrCode = 0;
		} else {
			this.message = "Simpan Gagal.\n";
			this.message += cjwf.getMessage();
			this.message += "\nPastikan data dengan benar lalu coba lagi";
		}
	}
	
	// COMMAND DELETE
	public void deleteMasterFormula(HttpServletRequest request, HttpServletResponse res){
		CtrlJangkaWaktuFormula cjwf = new CtrlJangkaWaktuFormula(request);
		cjwf.action(this.iCommand, oid, userId, userName);
		this.iErrCode = -1;
		long oid = cjwf.getOidRes();
		if (oid != 0) {
			this.message = "Hapus Berhasil.";
			this.iErrCode = 0;
		} else {
			this.message = "Hapus Gagal.\n";
			this.message += cjwf.getMessage();
		}
	}
	
	// COMMAND NONE
	public void showMasterFormulaForm(HttpServletRequest request, HttpServletResponse response) {
		JangkaWaktuFormula jwf = new JangkaWaktuFormula();
		if(this.oid != 0){
			try {
				jwf = PstJangkaWaktuFormula.fetchExc(this.oid);
			} catch (Exception e) {
				System.out.println("Error fecth Jang Waktu Formula " + e.getMessage());
			}
		}
		Vector<JangkaWaktu> listJw = PstJangkaWaktu.listAll();
		String optionJw = "";
		for(JangkaWaktu jw : listJw){
			optionJw += "<option value=\"" + jw.getOID() + "\"" + (jwf.getJangkaWaktuId()== jw.getOID() ? "selected" : "") + ">" + jw.getJangkaWaktu() + "</option>";
		}
		String htmlForm = ""
				+ "<input type=\"hidden\" "
				+ "name=\"" + FrmJangkaWaktuFormula.fieldNames[FrmJangkaWaktuFormula.FRM_FIELD_JANGKA_WAKTU_FORMULA_ID] + "\" "
				+ "id=\"" + FrmJangkaWaktuFormula.fieldNames[FrmJangkaWaktuFormula.FRM_FIELD_JANGKA_WAKTU_FORMULA_ID] + "\""
				+ "value=\"" + jwf.getOID() + "\">"
				+ "<div class=\"col-md-6\">"
				+ "<div class=\"form-group\">"
				+ "		<label>" + masterFormulaForm[sessLanguage][0] + "</label>"
				+ "		<select class=\"form-control select2\" style=\"width: 100%\""
				+ "				name=\"" + FrmJangkaWaktuFormula.fieldNames[FrmJangkaWaktuFormula.FRM_FIELD_JANGKA_WAKTU_ID] + "\""
				+ "				id=\"" + FrmJangkaWaktuFormula.fieldNames[FrmJangkaWaktuFormula.FRM_FIELD_JANGKA_WAKTU_ID] + "\">"
				+			optionJw
				+ "		</select>"
				+ "	</div>"
				+ "</div>"
				+ "<div class=\"col-md-6\">"
				+ "	<div class=\"form-group\">"
				+ "		<label>" + masterFormulaForm[sessLanguage][1] + "</label>"
				+ "		<select class=\"form-control select2\" style=\"width: 100%\""
				+ "				name=\"" + FrmJangkaWaktuFormula.fieldNames[FrmJangkaWaktuFormula.FRM_FIELD_TRANSACTION_TYPE] + "\""
				+ "				id=\"" + FrmJangkaWaktuFormula.fieldNames[FrmJangkaWaktuFormula.FRM_FIELD_TRANSACTION_TYPE] + "\">"
				+ "			<option value=\"" + PstBillMain.TRANS_TYPE_CASH + "\""
				+ "					" + (jwf.getTransType() == PstBillMain.TRANS_TYPE_CASH ? "selected" : "") + ">" 
				+				PstBillMain.payType[PstBillMain.TRANS_TYPE_CASH] 
				+ "			</option>"
				+ "			<option value=\"" + PstBillMain.TRANS_TYPE_CREDIT + "\""
				+ "					" + (jwf.getTransType() == PstBillMain.TRANS_TYPE_CREDIT ? "selected" : "") + ">"
				+				PstBillMain.payType[PstBillMain.TRANS_TYPE_CREDIT] 
				+ "			</option>"
				+ "		</select>"
				+ "	</div>"
				+ "</div>"
				+ "<div class=\"col-md-12\">"
				+ "<div class=\"form-group\">"
				+ "		<label>" + masterFormulaForm[sessLanguage][2] + "</label>"
				+ "		<textarea class=\"form-control\" rows=\"3\""
				+ "				name=\"" + FrmJangkaWaktuFormula.fieldNames[FrmJangkaWaktuFormula.FRM_FIELD_FORMULA] + "\""
				+ "				id=\"" + FrmJangkaWaktuFormula.fieldNames[FrmJangkaWaktuFormula.FRM_FIELD_FORMULA] + "\">" + jwf.getFormula() + "</textarea>"
				+ "		<p class=\"form-text\">"
				+ "			<span class=\"text-bold\">" + masterFormulaForm[sessLanguage][3] + ":</span>"
				+ "			<br>"
				+ "			1. <span class=\"text-bold\">HPP</span> = Harga Rata-rata/Average Price."
				+ "			<br>"
				+ "			2. <span class=\"text-bold\">DP</span> = Jumlah DP(Down Payment)."
				+ "			<br>"
				+ "			3. <span class=\"text-bold\">TOTAL_PRICE</span> = Jumah Pengajuan."
				+ "			<br>"
				+ "			4. <span class=\"text-bold\">INCREASE</span> = Kenaikan harga."
				+ "		</p>"
				+ "</div>"
				+ "</div>";
		this.htmlReturn = htmlForm;
	}
	
	// COMMAND LIST ============================================================================
	public JSONObject listDataTables(HttpServletRequest request, HttpServletResponse response, String[] cols, String dataFor, JSONObject result) {
		this.searchTerm = FRMQueryString.requestString(request, "sSearch");
		int amount = 10;
		int start = 0;
		int col = 0;
		String dir = "asc";
		String sStart = request.getParameter("iDisplayStart");
		String sAmount = request.getParameter("iDisplayLength");
		String sCol = request.getParameter("iSortCol_0");
		String sdir = request.getParameter("sSortDir_0");

		if (sStart != null) {
			start = Integer.parseInt(sStart);
			if (start < 0) {
				start = 0;
			}
		}
		if (sAmount != null) {
			amount = Integer.parseInt(sAmount);
			if (amount < 10) {
				amount = 10;
			}
		}
		if (sCol != null) {
			col = Integer.parseInt(sCol);
			if (col < 0) {
				col = 0;
			}
		}
		if (sdir != null) {
			if (!sdir.equals("asc")) {
				dir = "desc";
				if (dataFor.equals("listTransaksiKredit") || dataFor.equals("listHistory")) {
					dir = "asc";
				}
			}
		}

		String whereClause = "";
		if (dataFor.equals("listMasterFormula")) {
			whereClause += "("
					+ " JW." + PstJangkaWaktu.fieldNames[PstJangkaWaktu.FLD_JANGKA_WAKTU] + " LIKE '%" + searchTerm + "%'"
					+ " OR JWF." + PstJangkaWaktuFormula.fieldNames[PstJangkaWaktuFormula.FLD_FORMULA] + " LIKE '%" + searchTerm + "%'"
					+ ")";
			if(tipeTransaksi >= 0){
				whereClause += " AND " + PstJangkaWaktuFormula.fieldNames[PstJangkaWaktuFormula.FLD_TRANSACTION_TYPE] + "=" + tipeTransaksi;
			}
		} 

		String colName = cols[col];
		int total = -1;


		if (dataFor.equals("listMasterFormula")) {
			total = PstJangkaWaktuFormula.getCountJoinFormula(whereClause);
		} 

		this.amount = amount;

		this.colName = colName;
		this.dir = dir;
		this.start = start;
		this.colOrder = col;

		try {
			result = getData(total, request, dataFor, whereClause);
		} catch (Exception ex) {
			printErrorMessage(ex.getMessage());
		}

		return result;
	}

	public JSONObject getData(int total, HttpServletRequest request, String datafor, String whereClause) {
		int totalAfterFilter = total;
		JSONObject result = new JSONObject();
		JSONArray array = new JSONArray();

		String order = "";

		if (this.colOrder >= 0) {
			order += "" + colName + " " + dir + "";
		}

		ArrayList listData = new ArrayList();
		if (datafor.equals("listMasterFormula")) {
			listData = PstJangkaWaktuFormula.listJoinFormula(start, amount, whereClause, order);
		} 
		
		for (int i = 0; i <= listData.size() - 1; i++) {
			JSONArray ja = new JSONArray();
			if (datafor.equals("listMasterFormula")) {
				ArrayList temp = (ArrayList) listData.get(i);
				int type =Integer.parseInt(String.valueOf(temp.get(3)));
				ja.put("<div class='text-center'>" + (this.start + i + 1) + "</div>");
				ja.put("<div class='text-center'>" + temp.get(2) + "</div>");
				ja.put("<div class='text-center'>" + PstBillMain.payType[type] + "</div>");
				ja.put("<div class='text-left'><p>" + temp.get(4) + "</p></div>");
				String button = ""
						+ "<button type='button' class='btn btn-warning open-modal-master-formula'"
						+ "		value='" + temp.get(1) + "'>"
						+ "	<i class='fa fa-pencil'></i>"
						+ "</button>"
						+ "<span>&nbsp;</span>"
						+ "<button type='button' class='btn btn-danger delete-master-formula'"
						+ "		value='" + temp.get(1) + "'>"
						+ "	<i class='fa fa-trash'></i>"
						+ "</button>";
				ja.put("<div class='text-center'>" + button + "</div>");
				array.put(ja);
			} 
		}
		
		totalAfterFilter = total;
		try {
			result.put("iTotalRecords", total);
			result.put("iTotalDisplayRecords", totalAfterFilter);
			result.put("aaData", array);
		} catch (Exception e) {
			printErrorMessage(e.getMessage());
		}
		return result;
	}
	
	public void printErrorMessage(String errorMessage) {
		System.out.println("");
		System.out.println("========================================>>> WARNING <<<========================================");
		System.out.println("");
		System.out.println("MESSAGE : " + errorMessage);
		System.out.println("");
		System.out.println("========================================<<< * * * * >>>========================================");
		System.out.println("");
	}
	// <editor-fold defaultstate="collapsed" desc="HttpServlet methods. Click on the + sign on the left to edit the code.">
	/**
	 * Handles the HTTP <code>GET</code> method.
	 *
	 * @param request servlet request
	 * @param response servlet response
	 * @throws ServletException if a servlet-specific error occurs
	 * @throws IOException if an I/O error occurs
	 */
	@Override
	protected void doGet(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		processRequest(request, response);
	}

	/**
	 * Handles the HTTP <code>POST</code> method.
	 *
	 * @param request servlet request
	 * @param response servlet response
	 * @throws ServletException if a servlet-specific error occurs
	 * @throws IOException if an I/O error occurs
	 */
	@Override
	protected void doPost(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		processRequest(request, response);
	}

	/**
	 * Returns a short description of the servlet.
	 *
	 * @return a String containing servlet description
	 */
	@Override
	public String getServletInfo() {
		return "Short description";
	}// </editor-fold>

}
